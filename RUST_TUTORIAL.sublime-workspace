{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ci",
				"icivixwalter"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "RUST_TUTORIAL_CARLO_MILANESI\n\tNote\n\t\tquesto è un tutorial in italiano di carlo milanensi e \n\t\tsi trova qui:\n\t\t\thttps://carlomilanesi.github.io/linguaggio-rust/getting-started.html\n\n\tCREARE_FILE_PROGETTO\n\t\trust è create per Tier o 3 livelli con diverse garanzie.\n\t\tLe piattaforme sono identificate con la target-triple = ossia la stringa che (terna-bersalio) che informa il compilatore su quale output deve essere prodotto.\n\n\t\tLIVELLO 1\n\t\t\tLe piattaforme di livello 1 possono essere pensate come \"con garanzia di compilazione e funzionamento\".\n\t\tLIVELLO 2\n\t\t\tLe piattaforme di livello 2 possono essere pensate come \"con compilazione garantita\". I collaudi automatizzati non vengono eseguiti, e quindi non è garantito che si producano eseguibili che funzionino, ma queste piattaforme spesso funzionano abbastanza bene e le migliorie sono sempre benvenute! \n\n\t\tLIVELLO 3\n\t\t\tLe piattaforme di livello 3 sono quelle per cui Rust ha supporto, ma per applicare delle modifiche non è necessario né eseguire la compilazione, né passare i testi di collaudo. Gli eseguibili funzionanti su tali piattaforme possono essere lacunosi, dato che la loro affidabilità è spesso definita in termini di contributi dalla comunità. In aggiunta, gli artefatti di rilascio e gli installatori non sono forniti, ma ci possono essere infrastrutture comunitarie che li producono in luoghi non ufficiali.\n\n\tINSTALLAZIONE\n\t\tsu linux, windows ecc..\n\n\tNUMERO_DI_VERSIONE\n\t\tAprire il terminale e controllare il numero di @versione di @rust:\n\t\t\trustc --version\n\n\t\tPer windows controllare la variabile di sistema con \n\t\t\techo %PATH%.\n\t\tse non esiste impostarla manualmente in quanto  gli eseguibili di Rust si trovano in una directory come \"C:\\Program Files\\Rust stable GNU 1.x\\bin\".\n\n\t\t... RUST non fa i link\n\n\tCREARE DIRECTORY PER I PROGETTI\n\t\tper iniziare creare una directory di progetto e con la funzione main. es.\n\t\t\tfn main() {\n\t\tmain senza parametri () vuote, e con una macro\n\t\t\tprintln!(\"hello word\");\n\t\tinfatti println senza \t(!) = è una funzione\t\n\t\tinfatti println! con \t(!) = è una MACRO\n\t\t{};\t\t\t\t\t\t\t= le parentesi racchiudono tutte le funzioni e la riga finisce con \n\t\t\t\t\t\t\t\t\til ; perchè Rust è un linguaggio orientato alle ESPRESSIONI infatti\n\t\t\t\t\t\t\t\t\tla maggior parte delle cose sono espressioni e con il ; si dichiara\n\t\t\t\t\t\t\t\t\tla fine della espressione.\n\n\tCOMPILARE ED ESEGUIRE SONO PASSI SEPARATI\n\t\tRust è un linguaggio compilato in anticipo tipo il c++ perchè si ha il sorgente ed un eseguibile\n\t\tsulle piattaform a differenza degli  dei linguaggi dinamici tipo Python dove occore consegnare\n\t\til sorgente .py ma occorre anche la macchina virtuale per l'esecuzione, cià che non serve in rust.\n\t\tLa compilazione con rust c = va bene per i programmi semplici altrimenti occorre usare cargo.\n\n\t\tCARGO\n\t\t\tÈ un sistema di buile e di gestore di pacchetti Rust  per i progetti ed esegue 3 cose:\n\t\t\t\t- compila il codice;\n\t\t\t\t- scarica le librerie;\n\t\t\t\t- e costruisce le librerie;\n\n\t\t\tla versione di cargo è con : cargo --version\n\n\t\t\tCargo utilizza un sistema ad ordine, la directory principale per README + LA LICENZA + I LINK quindi il sorgente va nella directory \n\t\t\t\tsrc\n\n\t\t\tnella src ci sono i sorgenti tipo main.src oppure anche librerie lib.rs\n\n\t\t\tPer gestire con cargo occorre creare una direcotry madre\n\t\t\tuna directory src dove inseire i file sorgenti menetre nella directory principale il Cargo.toml\n\t\t\til toml = Questo file è nel formato TOML (Tom's Obvious Minimal Language). TOML è simile al formato INI, ma ha alcuni vantaggi, e viene usato come formato di configurazione di Cargo.\n\t\t\tDentro questo file, si digiti la seguente informazione:\n\n\t\t\t\t\t[package]\t\t\t\t= \tle seguenti direttive costruiscono un pacchetto\n\n\t\t\t\t\tname = \"hello_world\"\t= il nome del programma\n\t\t\t\t\tversion = \"0.0.1\"\t\t= la versione\n\t\t\t\t\tauthors = [ \"Il tuo nome <tu@esempio.it>\" ] = chi lo ha scritto\n\t\t\t\t\n\t\t\t\thello_word_cargo\n\t\t\t\t\tCargo.toml\n\t\t\t\t\tsrc\n\t\t\t\t\t\tmain.rs\n\n\n\t\t\tCargo viene utilizzato per grandi progetti, perchè  si iniziano ad usare i \"crate\"; questi, in altri linguaggi di programmazione, sono chiamati ‘librerie’ o ‘pacchetti’. \n\n\t\t\tCaon cargo per rilasciare il progetto finale occorre questo comando:\n\t\t\t\tcargo build --release \n\t\t\tcon questa secondo profilo la compilazione è piu lenta ma viene ottimimizzata e velocizzato\n\t\t\til file finale .exe\n\n\t\t\tCARGO LOCK\n\t\t\t\tè il file in cui cargo tiene conto delle dipendenze dell'applicazione.\n\n\n\t\t\tCARGO CREA PROGETTO\n\t\t\t\tper creare un nuovo progetto occorre eseguire questo comando\n\t\t\t\t\tcargo new nome_progetto --bin\n\t\t\t\t\t \t\t\t\t\t\t--bin = opzione per creare direttamente un eseguibile e non\n\t\t\t\t\t \t\t\t\t\t\tuna libreria\n\n\n\n\n\n\tGIOCO-INDOVINA\n\t\tImpostazione\n\t\t\timposto il nuovo progetto nella directory con il comando\n\t\t\t\tcargo new gioco_indovina --bin\n\t\t\t\t                         --bin = creato un nuovo progetto eseguibile non una libreria.\n\n         Elaborare un tentativo\n         \tElaboraiamo il file main per consentire al giocatore di inserire i tentativi:\n\n         \t\tuse std::io;\t\t= libreria per lo standard io\n         \t\tfn main() { \t\t= e () indicano che non ci sono argomenti,\n         \t\tlet \t\t\t\t= istruzione let, che viene usata per creare ‘legami a variabili’ \n         \t\t\t\t\t\t\t  [variable bindings].\n\n\t\t\t\t  esempio\n\t\t\t\t  \tlet foo = bar;\n\t\t\t\t\t  \tQuesta istruzione crea un nuovo legame chiamato foo, e lo lega al valore bar. In molti linguaggi, questo si chiama ‘variabile’, ma i legami di variabile di Rust hanno alcuni assi nella manica.\n\n\t\t\t\t\t  \tl'istruzione senza mut rende immutabile il legame in quanto di default\n\n\t\t\t\t\t  \t\tlet foo = 5; // immutabile.\n\t\t\t\t\t\t\tlet mut bar = 5; // mutabile\n\n\t\t\t\t\t\tcon l'istruzione \n\t\t\t\t\t\t\t    let mut tentativo = String::new();\n\t\t\t\t\t    viene creata una variabile mutevole di tipo Stringa associata ad un tipo String\n\t\t\t\t\t    e non un nuova istanza di String e quindi è un METODO DI CLASSE o un METODO STATICO.\n\n\t\t\t\t    \tcon l'istruzione\n\t\t\t\t    \t\tio::stdin().read_line(&mut tentativo).expect(\"non si riesce a leggere la riga\");\n\t\t\t\t    \t\tutilizza lo std::io\n\t\t\t\t    \t\t\tstd::io::stdin   = legge l'imput da linea di comando\n\t\t    \t\t    \t\t(&mut tentativo) = imposta la variabile tentativo mutevole con il \t\t\t\t\trisultato\n\t\t    \t\t    \t\t.expect(\"non ..) = visto che anche un Result (io::Result) come primo\n\t\t    \t\t    \t\tcaso generico e anche sottolibreria ma viene utilizzato per il messaggio di errore se si va in panic.\n\n    \t\t    \t\tle {} nella macro sono segna posto\n    \t\t    \t\tQuesta riga stampa la stringa dove abbiamo salvato il nostro input. Le parentesi graffe {} sono dei segna-posto per passare tentativo come argomento. Se avessimo scritto diversi {}, avremmo passato diversi argomenti:\n\n\t\t\t\t\t\t\t\t\tlet x = 5;\n\t\t\t\t\t\t\t\t\tlet y = 10;\n\n\t\t\t\t\t\t\t\t\tprintln!(\"x e y: {} e {}\", x, y);\n\n\n\n\tGENERARE UN NUMERO SEGRETO \n\t\tcrate rand\n\t\t\tcassone o scatola oppure libreria che permette per i numeri casuali, nel frattempo viene\n\t\t\tcreato un nuovo progetto per i numero segreto:\n\t\t\t\tmkdir genera_numero_segreto\n\n\t\t\tcon \n\t\t\t\tcargo new numero_segreto --bin \n\n\t\t\tdopo aver creato il progetto per utilizzare la libreria rand occore indicare la dipendenza\n\t\t\tnel toml\n\t\t\t\trand=\"0.3.0\"\n\n\t\t\tdependencies per sapere quali dipendenze ci sono da crate esterni, e quali versioni di essi sono richieste. In questo caso, abbiamo specificato la versione 0.3.0, che Cargo capisce essere qualunque rilascio che è compatibile con questa specifica versione.\n\t\t\tCargo va a prendere le versioni più recenti di ogni cosa dal registry, che è una copia di dati presi da Crates.io. Crates.io è il posto dove la gente nell'ecosistema di Rust invia i suoi progetti open source in Rust per farli usare ad altri.\n\n\t\t\tDopo aver aggiornato il registry, Cargo verifica la nostra sezione [dependencies] e scarica tutti i pacchetti che non abbiamo ancora. In questo caso, mentre abbiamo detto soltanto che volevamo dipendere da rand, ci siamo presi anche una copia di libc. Questo perché rand dipende da libc per funzionare. Dopo averli scaricati, li compila, e poi compila il nostro progetto.\n\t\t\tQuando costruiamo un progetto da zero ed impostiamo la dipendenza ad es. rand=0.3.0, cargo\n\t\t\timposta il Cargo Lock a questa versione e se uscira una successiva tipo  rand=0.3.9 il \n\t\t\tcargo lock impedisce di scacarica la nuova versione per il pericolo della incompatibilita\n\t\t\tretroattiva a meno che non impostiamo a mano il 0.3.9 NEL TOML\n\t\t\tALTERNATIVA per FORZARE IL CARGO.LOCK possiamo usare\n\t\t\t\tcargo update\n\t\t\tche significa ignora il cargo.lock e cerchera di aggiornare le versioni > 0.3.0 and < 0.3.9\n\t\t\tma non la versione 0.4.0 che deve essere esplicitamente impostata nel .toml\n\n\t\t\tper utilizzare rand dopo averlo dichiarato nelle dipendence del .toml\n\t\t\toccore inserire nel file la dichiarazione di utilizzo:\n\t\t\t\textern crate rand;\n\n\n\t\t\tviene inserito \n\t\t\t\tuse std::cmp::Ordering;\n\n\t\t\tSTD::CMP = è un metodo che restituisce un ORDERIN cioè un enum  < = >.\n\t\t\tcmp = viene chiamato per qualunque oggetto da confrontare con riferimento allo\n\t\t\tstesso oggetto da confrontare  e restisce un Ordering.\n\t\t\tOrdering = è un enum con 3 POSSIBILI VARIANTI\n\t\t\t\tLESS, EQUAL, GREATER\n\n\t\t\tserve per confrontare i numeri  e deve essere integrato con un match\n\t\t\t\t\n\t\t\t\tmatch tentativo.cmp(&numero_segreto) {\n\t\t\t\t    Ordering::Less    => println!(\"Troppo piccolo!\"),\n\t\t\t\t    Ordering::Greater => println!(\"Troppo grande!\"),\n\t\t\t\t    Ordering::Equal   => println!(\"Hai vinto!\"),\n\t\t\t\t}\n\n\n\t\t\t\n\t\t\tCONVERSIONE DEL TIPO STRINGA CON PARSE\t\n\n\t\t\t\tIl metodo parse() applicato a una stringa analizza la stringa estraendone un numero di qualche tipo. Dato che tale metodo può riconoscere vari tipi di numeri, dobbiamo suggerire a Rust il tipo esatto del numero che vogliamo. Pertanto, scriviamo let tentativo: u32. I due-punti (:) dopo tentativo dicono a Rust che stiamo annotando il tipo del legame. u32 è il tipo intero senza segno a trentadue bit. \n\t\t\t\t\tfn main() {\n\t\t\t\t        let tentativo: u32 = tentativo.trim().parse()\n\t\t\t\t        .expect(\"Prego, digita un numero!\");\n\t\t\t\t}\n\n\n\t\t\tLOOP\n\t\t\t\tViene creato un loop\n\t\t\t\ted inserito la gestione del panic\n\n\tLEGAMI DI VARIABILE - 4.1\n\t\t\t\n\t\t\tPer introdurre un legame, si usa la parola-chiave let, così:\n\t\t\t\t\tlet x = 5;\n\n\t\t\tI PATTERN - 4.1.1\n\t\t\t\tnegli altri linguaggi si chiama variabile, ma i legami di variabile di Rust hanno alcuni assi nella manica. Per esempio, il lato sinistro di un'istruzione let è un ‘pattern’, non un semplice nome di variabile\n\n\t\t\t\t\t\tlet (x, y) = (1, 2);\n\t\t\t\t\t\tDopo che questa istruzione viene eseguita, x varrà uno, e y varrà due. (vedere i pattern)\n\n\t\t\tANNOTAZIONI DI TIPO - 4.1.2\n\t\t\t\tRust è un linguaggio tipizzato staticamente, il che significa che specifichiamo subito i tipi, e questi vengono verificati in fase di compilazione.\n\t\t\t\tMa rust ha anche la \n\t\t\t\t\tINFERENZA DI TIPO. Se riesce a desumere qual'è il tipo di qualche \n\t\t\t\t\t\t\t\t\t\tdato, Rust non costringe a digitarlo splicitamente.\n\n\t\t\t\tSe vogliamo, possiamo aggiungere il tipo di dato.\n\t\t\t\t\tlet x: i32 = 5;\n\n\t\t\t\tRust ha molti tipi interi primitivi. I loro nomi cominciano con i per gli interi con segno, e con u per gli interi senza segno (unsigned). Le dimensioni intere possibili sono 8, 16, 32, e 64 bit.\n\n\t\t\tMUTABILITÀ\n\t\t\t\tDi default, i legami sono immutabili. Questo codice non compilerà:\n\t\t\t\t\tlet x = 5;\n\t\t\t\t\tx = 10;\n\t\t\t\tSe si vuole che un legame sia mutabile, si deve usare mut:\n\t\t\t\t\tlet mut x = 5; // mut x: i32\n\t\t\t\t\tx = 10;\n\n\t\t\t\tLA RAGIONE PRINCIPALE DELLA IMMUTABILITA DEI LEGAMI E' LA SICUREZZA.\n\t\t\t\tSe ci si dimentica di dire mut, il compilatore se ne accorgerà, e farà sapere che si ha mutato qualcosa che si potrebbe non aver inteso mutare. Se i legami fossero mutabili di default, il compilatore non sarebbe in grado di dirlo. Se si intendesse proprio la mutazione, allora la \n\t\t\t\tsoluzione è facilissima: aggiungere mut.\n\n\t\t\tINIZIALIZZARE I LEGAMI\n\t\t\t\tI legami di variabile in Rust hanno un altro aspetto che differisce da altri linguaggi: I LEGAMI DEVONO ESSERE INIZIALIZZATI CON UN VALORE PRIMA DI POTERLI USARE.\n\t\t\t\tSe utilizziamo ugualmente una variabile senza inizializzabile Rust ci da errore; Rust non ci permetterà di usare un valore che non è stato inizializzato.\n\t\t\t\t\tes.\n\t\t\t\t\t\tfn main() {\n\t\t\t\t\t\t    let x: i32;\n\n\t\t\t\t\t\t   !=macro\n\t\t\t\t\t\t   \t\t\t\t   1°               2°\n\t\t\t\t\t\t   2 argomenti |------------------||--|\n\t\t\t\t\t\t    println!(\"Il valore di x è: {}\", x);\n\t\t\t\t\n\t\t\t\t\tRust non ci permetterà di usare un valore che non è stato inizializzato.\n\t\t\tINTERPOLAZIONE STRINGA\n\t\t\t\t\t@interpolazione_(la @interporabilita della stringa è l'inserimento\n\t\t\t\t\t\tdi una stringa all'interno di un'altra stringa,)\n\t\t\t\t\t@{}_(le @grasse sono dei @segnaposto per dire dopo la virgola interpoliamo il valore)\n\n\t\t\t\tprintln!(\"Il valore di x è: {}\", x); utilizza l'interpolazione stringa ossia l'inserimento di una stringa all'interno di un'altra stringa al posto di altrettanti segnaposto. Infatti le {} sono dei segnaposto per cui viene detto a rust dopo la stringa tipo :\n\t\t\t\t\t\"Il valore di x è: {}\",  = indichiamo a rust che dopo la virgola (,)\n\t\t\t\t\tinterpoliamo il valore di x e la virgola serve a separare gli argomenti che passiamo alle funzioni e alle macro.\n\n\n\t\t\tAMBITO ED OSCURAMENTO\n\t\t\t\tI legami di variabile hanno un ambito - ossia sono vincolati a risiedere nel blocco in cui sono stati definiti. \n\t\t\t\tUn blocco è una collezione di istruzioni racchiuse da { e }. Anche le definizioni di funzione sono blocchi! \n\n\t\t\t\tNell'esempio seguente definiamo due legami di variabile, x e y, che risiedono in blocchi diversi. Si può accedere a x da tutto il blocco fn main() {}, mentre si può accedere a y solamente dal blocco più interno:\n\n\t\t\t\t\t\tfn main() { //I° BLOCCO GRAFFE\n\t\t\t\t\t\t    let x: i32 = 17;\n\n\t\t\t\t\t\t    //II° BLOCCO GRAFFE SEPARATO\n\t\t\t\t\t\t    {\n\t\t\t\t\t\t        let y: i32 = 3;\n\t\t\t\t\t\t        println!(\"Il valore di x è {} e il valore di y è {}\", x, y);\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    //non puoi stampare x\n\t\t\t\t\t\t    println!(\"Il valore di x è {} e il valore di y è {}\", x, y); // Questo non funziona Y non accessibile\n\t\t\t\t\t\t}\n\t\t\t\tLa prima println! stamperebbe \"Il valore di x è 17 e il valore di y è 3\", ma questo esempio non può essere compilato con successo, perché la seconda println! non può accedere al valore di y, dato che non è più nel suo ambito. Otteniamo invece questo errore:\n\n\n\n\n\t\t\t\tOSCURAMENTO - SHADOWED\n\t\t\t\t \tInoltre, i legami di variabile possono venire oscurati (\"shadowed\"). Ciò significa che un successivo legame di variabile con il medesimo nome di un legame attualmente nel suo ambito scavalcherà il legame precedente.\n\n\t\t\t\t\tlet x: i32 = 8;\n\t\t\t\t\t{\n\t\t\t\t\t    println!(\"{}\", x); // Stampa \"8\"\n\t\t\t\t\t    let x = 12; \t   //OSCURA LA X =8 \n\t\t\t\t\t    println!(\"{}\", x); // Stampa \"12\"\n\t\t\t\t\t}\n\t\t\t\t\tprintln!(\"{}\", x); // Stampa \"8\"\n\t\t\t\t\tlet x =  42;       //OSCURA LA X =8 \n\t\t\t\t\tprintln!(\"{}\", x); // Stampa \"42\"\n\n\t\t\t\t\tATTENZIONE l'ocsuramento lega un nome ad un valore diverso ed è ammissibile il mut (es. x = 5 poi shadowe = x=\"pippo\" è un testo non un numero)\n\t\t\t\t\t\t@oscuramento_(è possibile il mutamento? si NON VIENE DISTRUTO MA NON E' ACCESSIBILE)\n\t\t\t\t\tl'oscuramento non alter o distrugge il valore ma continua ad esistere\n\t\t\t\t\tfinche non esce dall'ambito MA NON E' ACCESSIBILE.\n\t\t\t\t\t\tES.\n\t\t\t\t\t\t\tlet mut x: i32 = 1;\n\t\t\t\t\t\t\tx = 7;\n\t\t\t\t\t\t\tlet x = x; // x adesso è immutabile ed è legato a 7\n\n\t\t\t\t\t\t\tlet y = 4;\n\t\t\t\t\t\t\tlet y = \"Posso anche essere legato a un testo!\"; // y adesso è di un altro tipo\n\n\n\tFUNZIONI 4.2\n\t\tMAIN\n\t\t\t\t\t@funzioni_(nelle funzioni i @parametri devono essere dichiarati )\n\n\t\t\tOgni programma Rust ha almeno una funzione, la funzione main:\n\n\t\t\t\tfn main() {\n\t\t\t\t}\n\n\t\t\tNO ARGOMENTI\n\t\t\t\tQuesto è la dichiarazione di funzione più semplice possibile. Come accennato prima, fn indica che ‘questa è una funzione’, ed è seguita dal nome della funzione, da due parentesi vuote perché questa funzione non prende argomenti, e poi da parentesi graffe che contengono il corpo della funzione. Ecco una funzione chiamata foo:\n\n\t\t\t\t\tfn foo() {\n\t\t\t\t\t}\n\n\t\t\tPARAMETRI\n\t\t\t\tfn main() {\n\t\t\t\t\t\t//chiamo la funzione e passo il parametro\n\t\t\t\t\t    stampa_numero(5);\n\t\t\t\t\t}\n\n\t\t\t\t\t//creato fuori main la funzione con 1 parametro\n\t\t\t\t\tfn stampa_numero(x: i32) {\n\t\t\t\t\t    println!(\"x is: {}\", x);\n\t\t\t\t\t}\n\n\t\t\tNOME + TIPO ARGOMENTO\n\t\t\t\tNote\n\t\t\t\t\tCome si vede, gli argomenti delle funzioni funzionano in modo molto simile alle dichiarazioni let: si aggiunge un tipo al nome dell'argomento, dopo i due punti :.\n\n\t\t\t\t\tEcco un programma completo che somma due numeri e stampa il risultato:\n\n\t\t\t\t\t\tfn main() {\n\t\t\t\t\t\t    stampa_somma(5, 6); //Virgola quando chiamo la funzione\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//\t\t\tla funzione è esterna a main\n\t\t\t\t\t\t//--------------------------------------------------------------//\n\t\t\t\t\t\t//x: i32 = NOME+TIPO ..., passo 2 argomenti numerici x,y\n\t\t\t\t\t\tfn stampa_somma(x: i32, y: i32) { //virgola quando dichiaro la funzione\n\t\t\t\t\t\t\t\t\t\t\t\t\t   //\t\n\t\t\t\t\t\t    println!(\"la somma è: {}\", x + y);\n\t\t\t\t\t\t}\n\n\t\t\t\tLA VIRGOLA\n\t\t\t\t\tSi separano gli argomenti usando una virgola, sia quando si chiama la funzione, che quando la si dichiara.\n\n\t\t\t\tOBBLIGATORIA LA DICHIARAZIONE DEI TIPI\n\t\t\t\t\tDiversamente dall'istruzione let, i tipi degli argomenti delle funzioni devono essere dichiarati. Pertanto questo non funziona:\n\n\t\t\t\t\t\t\tfn stampa_somma(x, y) {\n\t\t\t\t\t\t\t    println!(\"la somma è: {}\", x + y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tSi ottiene l'errore:\n\t\t\t\t\t\t\t\tprevisto 1 tra  ! o @ ..\n\t\t\t\t\t\t\t\texpected one of `!`, `:`, or `@`, found `)`\n\t\t\t\t\t\t\t\t\tfn print_sum(x, y) {\n\n\t\t\t\tINFERENZA\n\t\t\t\t\t\t\t@inferenza_(determinazione del tipo di dato non dichiarato)\n\n\t\t\t\t\t\tE' una attivita in cui il compilatore  usa l'inferenza dei tipi  per determinare i tipi di dati delle variabili locali dichiarate senza un Tipo. Il compilatore inferisce il tipo della variabile dal tipo dell'espressione di inizializzazione. Ciò consente di dichiarare le variabili senza specificare in modo esplicito un tipo, come illustrato nell'esempio seguente. Come risultato delle dichiarazioni, entrambe num1 e num2 sono fortemente tipizzata come interi.\n\t\t\t\t\t\t\t   ' //esempio IN VB\n\t\t\t\t\t\t\t\t    Dim num1 As Integer = 3\n\n\t\t\t\t\t\t\t\t    ' Using local type inference.\n\t\t\t\t\t\t\t\t    Dim num2 = 3  //inferenza il compilatore comprende che è un intero\n\n\t\t\t\t\t\t\t\t//il vb all'interno della funzione @INFERENZA    \n\t\t\t\t\t\t\t\tPublic Sub inferenceExample()\n\n\t\t\t\t\t\t\t\t    ' Using explicit typing. - tipo dichiarato\n\t\t\t\t\t\t\t\t    Dim num1 As Integer = 3\n\n\t\t\t\t\t\t\t\t    ' Using local type inference. \n\t\t\t\t\t\t\t\t    Dim num2 = 3  //imposta come intero simile al tipo dichiarato perchè all'interno della funzione\n\n\t\t\t\t\t\t\t\tEnd Sub\n\n\t\t\t\t\t    In Rust L'INFERENZA è applicata all'interno del { corpo delle\n\t\t\t\t\t    \tfunzioni }, mentre è OBBLIGATORIA LA DICHIARAZIONE DEI TIPI\n\t\t\t\t\t    \tnella DEFINIZIONE DELLE FUNZIONI.\n\n\t\t\t    VALORE DI RITORNO DELLA FUNZIONE\n\t\t\t    \t\t\t@funzioni_(il valore di @ritorno con @->)\n\t\t\t    \t\tLe funzioni di Rust restituiscono esattamente un valore, e si dichiara il tipo dopo una ‘freccia’, che è un trattino (-) seguito da un segno di maggiore (>). L'ultima riga di una funzione determina che cosa restituisce. Qui si noterà la mancanza di un punto-e-virgola. Se l'avessimo aggiunto:\n\n\t\t\t\t\t\t\t\t\tfn somma_uno(x: i32) -> i32 {\n\t\t\t\t\t\t\t\t\t    x + 1 // senza il; permette il valore di ritorno altrimenti errore\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\tESPRESSIONI CONTRO ISTRUZIONI\n\t\t\t\t\t\t@istruzioni_(in rust son di due tipi istruzioni quelle che restiscono un valore e quelle no. )\n\n\t\t\t\t\t\t@istruzioni@espressioni_(in rust restituiscono una tupla)\n\n\t\t\t\tESPRESSIONI ED ISTRUZIONI DIFFERENZA\n\n\t\t\t\t\tRust è primariamente un linguaggio basato sulle espressioni. Ci sono solamente due tipi di istruzioni, e ogni altra cosa è un'espressione.\n\n\t\t\t\t\tla differenza è che:\n\t\t\t\t\t\tespressioni = restiscono un valore\n\t\t\t\t\t\tistruzioni\t= non restituiscono valori\n\t\t\t\t\t\t\tl'istruzione x + 1; non restituisce un valore. \n\n\t\t\t\tISTRUZIONI\n\t\t\t\t\tci sono due tipi di istruzioni:\n\n\t\t\t\t\t\tISTRUZIONE DI DICHIARAZIONE = con Let \n\t\t\t\t\t\tISTRUZIONE DI ESPRESSIONE \t= trasforma qualsiasi istruzione in \n\t\t\t\t\t\t\t\t\t\t\t\t\tuna espressione; significa che rust si aspetta da ogni istruzione segua un'altra istruzione.\n\t\t\t\tISTRUZIONE DI DICHIARAZIONE\n\n\t\t\t\t\tin altri linguaggi esempio in Ruby pui creare espressioni e fare il \n\t\t\t\t\tlegame delle variabili es.\n\t\t\t\t\t\t x = y =5;  //Ruby si puo' creare una espressione\n\n\t\t\t\t    In Rust in non è ammesso il legame delle variabile con una espressione es:\n\t\t\t\t    \tlet x = (let y = 5); // atteso un identificatore, trovata la parola-chiave `let` - produce errore.\n\n\t\t\t    \tMa rust utilizza let per attivare una istruzione e quindi non si puo assegnare come negli altri linguaggi con let una espressione, perche a differenza degli altri linguaggi con con l'istruzione:\n\t\t\t    \t\tx = y = 5\n\t\t\t    \t\tx ha 5 assegnato da y\n\t\t    \t\tnel caso di rust\n\t\t    \t\t\tlet x = (let y = 5); // da errore in quanto  x non ha il valore\n\t\t    \t\t\tdi y  perche in:\n\t\t    \t\t\t\tRust = si ha un solo possessore  e quindi 5 non puo essere\n\t\t    \t\t\t\tassegnato sia a y e sia ad x quindi in questo caso viene dato un errore.\n    \t\t\t\tnel caso invece di una istruzione di dichiarazione del tipo\n    \t\t\t\t\tlet mut y = 5\n    \t\t\t\t\tlet x = (y=6);\n    \t\t\t\t\t    x = ha valore di tupla vuota non di 6 mentre y contiene il 6.\n\n\t\t\t    ISTRUZIONE DI ESPRESSIONE\n\t\t\t    \tle istruzioni di espressione il II tipo di istruzione, servono a Rust per trasformare QUALUNQUE ESPRESSIONE IN UNA ISTRUZIONE.\n\t\t\t    \tPerchè rust si aspetta che ad ogni istruzione segua un'altra istruzione sempre separata da un ;\n\t\t\t    \t\n\t\t\t    \tUNICA ECCEZIONE AL ; è quando costruiamo una funzione che restituisce\n\t\t\t    \tun valore nel cui corpo viene omessa il punto e virgola (;) perche è\n\t\t\t    \tun valore di ritorno es.\n\t\t\t    \t\tfn somma_uno (x: i32) {\n\t\t    \t\t\t\tx+1  //senza ; restituisce il valore incrementato\n\t\t\t    \t\t}\n\n\t\t    \t\t\t\t.\n    \t\t\t\te quindi in rust L'ISTRUZIONE DI ESPRESSIONE è sempre una istruzione di assegnamento e non di espressione in quanto anche un codice di questo tipo:\n    \t\t\t\t\tlet mut y = 5;  //creo y mutubile\n\n\t\t\t\t\t\tlet x = (y = 6);  // x ha valore `()`, non `6`\n    \t\t\t\t \n    \t\t\t\t let x è un tupla vuota ma non 6 non è un risutato di una espression\n    \t\t\t\t di y che assegna a x, MA UNA ISTRUZIONE CHE ASSEGNA A X UNA TUPLA VUOTA.\n    \t\t\t\t mentre y è uguale a 6.\n\n    \t\t\t\t conclusione in rust ci sono istruzioni di assegnazioni o istruzioni di espressione, mentre tutto il resto sono espressioni.\n\n\n\t\t\t\tUSCITE PRECOCI\n\t\t\t\t\tcon la parola chiave return\n\t\t\t\t\t\tfn foo(x: i32) -> i32 {\n\t\t\t\t\t\t    return x;\n\n\t\t\t\t\t\t    // non si eseguirà mai questo codice!\n\t\t\t\t\t\t    x + 1\n\t\t\t\t\t\t}\n\n\t\t\t\t\toppure con stile elegante:\n\t\t\t\t\t\tfn foo(x: i32) -> i32 {\n\t\t\t\t\t\t\t\t    return x + 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\tFUNZIONI DIVERGENTI\n\n\t\t\t\tsono le funzioni che non restituiscono mai il controllo al chiamante:\n\n\t\t\t\t\tfn diverge() -> ! {\n\t\t\t\t\t    panic!(\"Questa funzione non restituisce mai il controllo al chiamante!\");\n\t\t\t\t\t}\n\n\t\t\t\t\tpanic! è una macro, come lo è println!() che abbiamo già visto. Diversamente da println!(), panic!() manda in crash il thread corrente, stampando il messaggio ricevuto come argomento. Dato che questa funzione provocherà un crash, non restituirà mai il controllo al chiamante, e quindi ha il tipo ‘!’, che si legge ‘diverge’\n\n\n\t\t\t\tSe si aggiunge una funzione main che chiama diverge() e la si esegue, si otterrà un output simile a questo:\n\t\t\t\t\tthread ‘main’ panicked at ‘Questa funzione non restituisce mai il controllo al chiamante!’, main.rs:2\n\n\t\t\t\tUna funzione divergente può essere usata dove ci si aspetta un'espressione di qualunque tipo:\n\n\t\t\t\t\t\tlet x: i32 = diverge();\n\t\t\t\t\t\tlet x: String = diverge();\n\t\t\t\n\t\t\tPUNTATORI DI FUNZIONE\n\t\t\t\t\t@puntatori_(a @funzione con @interferenza o senza)\n\n\t\t\t\tPossiamo anche creare legami di variabili che puntano a funzioni:\n\t\t\t\t\t\n\t\t\t\t\tlet f: fn(i32) -> i32;\n\n\t\t\t\tf è un legame di variabile che punta a una funzione che prende un i32 come argomento e restituisce un i32. Per esempio:\n\t\t\t\t\t\n\t\t\t\t\tfn piu_uno(i: i32) -> i32 {\n\t\t\t\t\t\t    i + 1\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// senza l'inferenza di tipo\n\t\t\t\t\t\tlet f: fn(i32) -> i32 = piu_uno;\n\n\t\t\t\t\t\t// con l'inferenza di tipo\n\t\t\t\t\t\tlet f = piu_uno;\n\t\t\t\t\t\t\t\n\t\t\t\tPoi possiamo usare f per chiamare la funzione:\n\t\t\t\t\tlet sei = f(5);    //variabile che punta alla funzione f e la chiama \t\t\t\t\te poi assegna il risultato a sei.\n\n\tTIPI PRIMITIVI 4.3\n\t\tNote\n\t\t\t\tIl linguaggio Rust ha vari tipi che sono considerati ‘primitivi’. Ciò significa che fanno parte del linguaggio. Rust è strutturato in modo tale che la libreria standard fornisca anche vari altri tipi utili, costruiti basandosi su quelli primitivi, ma quelli che vedremo sono i più primitivi.\n\n\t\tBooleani \t\t\t\t\t\t\t4.3.1\n\t\t\tRust ha un tipo booleano primitivo, chiamato bool. Ha solo due valori, true (\"vero\") e false (\"falso\"):\n\n\t\t\t\tlet x = true;\n\n\t\t\t\tlet y: bool = false;\n\t\t\t\tNella documentazione della libreria standard si trova ulteriore documentazione sui bool.\n\n\n\t\t\t\tI booleani sono usati tipicamente nei costrutti if.\n\t\tchar \t\t\t\t\t\t\t\t4.3.2\n\t\t\tIl tipo char rappresenta un singolo valore scalare Unicode. Si possono creare dei char racchiudendoli tra apici singoli: (')\n\t\t\t\t\tlet x = 'x';\n\t\t\t\t\tlet two_hearts = '💕';\n\t\t\t\t\tDiversamente da alcuni altri linguaggi, ciò significa che il char di Rust non è rappresentato con un singolo byte, ma da quattro byte.\n\n\t\tTipi numerici\t\t\t\t\t\t4.3.3\n\n\t\t\tNote\n\t\t\t\tRust ha parecchi tipi numerici, appartenenti alle seguenti categorie: con segno e senza segno, fissi e variabili, a virgola mobile e interi.\n\n\t\t\t\tQuesti tipi consistono di due parti: la categoria, e la dimensione. Per esempio, u16 è un tipo senza segno con una dimensione di sedici bit. Più bit consentono di rappresentare numeri più grandi.\n\n\t\t\t\tSe un letterale numerico non specifica il tipo esatto a cui appartiene, il suo tipo viene inferito nel seguente modo:\n\n\t\t\t\tEcco una lista dei diversi tipi numerici, con dei link alla loro documentazione nella libreria standard:\n\n\t\t\t\t\ti8\n\t\t\t\t\ti16\n\t\t\t\t\ti32\n\t\t\t\t\ti64\n\t\t\t\t\tu8\n\t\t\t\t\tu16\n\t\t\t\t\tu32\n\t\t\t\t\tu64\n\t\t\t\t\tisize\n\t\t\t\t\tusize\n\t\t\t\t\tf32\n\t\t\t\t\tf64\n\t\t\t\t\tEsaminiamoli in base alla loro categoria:\n\n\t\tCon segno e senza segno \t\t\t4.3.4\n\t\t\tCi sono due categorie di tipi interi: \n\t\t\t\t- con segno \t= da -8 a + 7\n\t\t\t\te \n\t\t\t\t- senza segno \t= 0 a +15 (no rappresenta i negativi)\n\t\t\tPer comprendere la differenza, consideriamo un numero di quattro bit. \n\n\t\t\tUn numero di quattro bit, con segno, consentirebbe di rappresentare i numeri da -8 a +7. \n\t\t\tI numeri con segno usano la \"rappresentazione in complemento a due\". \n\n\t\t\tUn numero di quattro bit, senza segno, dato che non ha bisogno di rappresentare valori negativi, può rappresentare valori da 0 a +15.\n\n\t\tTipi a dimensione fissa \t\t\t4.3.5\n\t\t\tI tipi dimensione fissa hanno uno specifico numero di bit nella loro rappresentazione. Le dimensioni in bit valide sono :\n\t\t\t\t8, 16, 32, e 64. \n\t\t\tPerciò, u32 è un intero senza segno, a 32 bit, e i64 è un intero con segno, a 64 bit.\n\n\t\tTipi a dimensione variabile \t\t4.3.6\n\t\t\t\t\n\t\t\t\t@usize_{dimensione dipende dall'architettura}\n\n\t\t\tRust fornisce anche dei tipi la cui effettiva dimensione dipende dall'architettura della macchina in questione. L'ampiezza di questi tipi è sufficiente ad esprimere la dimensione di qualunque collezione, perciò questi tipi appartengono alla categoria ‘size’ ('dimensione'). Anche loro hanno la versione con segno e quella senza segno, e quindi sono due: isize e usize.\n\n\t\tTipi a virgola mobile \t\t\t\t4.3.7\n\t\t\t\t@float_(numeri a @virgola @mobile con @f32 e @f64 sono a @precisione @singola o @doppia)\n\n\t\t\tRust ha anche due tipi a virgola mobile: f32 e f64. Questi corrispondono rispettivamente ai numeri a precisione singola e a precisione doppia secondo lo standard IEEE-754.\n\n\t\tArrays \t\t\t\t\t\t\t\t4.3.8\n\t\t\t\t@array_(@array@fisso o schiera per seguenze di dati o lista  a lunghezza fissa, si distingue dal vettore perche esso è dinamico mentre il semplice @array è fisso = alloca nello stack)\n\n\t\t\tCome molti linguaggi di programmazione, Rust ha dei tipi compositi per rappresentare sequenze di dati. Il più basilare è il tipo array (\"schiera\"), una lista a lunghezza fissa di elementi dello stesso tipo. Di default, gli array sono @immutabili.\n\t\t\t\tlet a = [1, 2, 3]; // a: [i32; 3]\n\t\t\t\tlet mut m = [1, 2, 3]; // m: [i32; 3]\n\n\t\t\tGli arrays hanno tipo [T; N]. \n\t\t\tParleremo di questa notazione T nella [sezione sulla genericità][generics]. La N è una costante nota in fase di compilazione, che indica il numero di oggetti contenuto nell'array.\n\n\t\t\tC'è un'abbreviazione per inizializzare ogni elemento di un array allo stesso valore. Ecco come inizializzare a 0 ognuno dei 20 elementi dell'array a:\n\n\t\t\t\tlet a = [0; 20]; // a: [i32; 20] attenzione con il ; resetta tutti a 20 a \n\t\t\t\t\t\t\t\t\t\t\t\t zero\n\n\t\t\tSi può ottenere il numero di elementi di un array a con l'espressione a.len(): \n\t\t\t\tlet a = [1, 2, 3];\n\n\t\t\t\tprintln!(\"a ha {} elementi\", a.len());\n\n\t\t\tSi può accedere a un particolare elemento di un array con la notazione a indice:\n\t\t\t\t\t@accesso_(@elemento di un @array con l)\n\n\t\t\t\tlet nomi = [\"Graydon\", \"Brian\", \"Niko\"]; // nomi: [&str; 3]\n\n\t\t\t\tprintln!(\"Il secondo nome è: {}\", nomi[1]);\n\n\t\t\tGli indici partono da zero, come nella maggior parte dei linguaggi di programmazione, e perciò il primo nome è nomi[0] e il secondo nome è nomi[1]. L'esempio precedente stampa Il secondo nome è: Brian. Provando ad usare un indice non compreso nell'array, si ottiene un errore, perché per ogni accesso ad un array, in fase di esecuzione si verifica che l'indice sia compreso nei limiti. Accessi erronei di questo tipo causano molti bug in altri linguaggi di programmazione di sistema.\n\n\t\tSlices (\"@Fette\")\t\t\t\t\t4.3.9\n\n\t\t\t\t@slice_(sono viste dentro una struttura come una parte di array ed un putnatore all'inizio dei dati)\n\n\t\t\tLe ‘slices’ (pronunciato \"slaises\") sono riferimenti a (o “viste\" dentro) un'altra struttura dati. Servono a consentire un accesso sicuro ed efficiente ad una porzione di un array senza fare copie. Per esempio, si potrebbe voler far riferimento solamente ad una riga di un file letto in memoria. Per sua natura, una slice non viene creata direttamente, ma partendo da un legame di variabile esistente. Le slices hanno una lunghezza fissa, e il loro contenuto può essere mutabile o immutabile.\n\n\t\t\tInternamente, le slice sono rappresentate come un @puntatore all'inizio dei dati e una lunghezza.\n\n\n\n\t\t\tSintassi delle @slices\t\t\t4.4.9.1\n\n\t\t\t\tPer creare una slice da vari oggetti si può usare la combinazione del carattere @& e della coppia di caratteri @[]. Il carattere & indica che le slices sono simili ai [riferimenti], che tratteremo in dettaglio più avanti in questa sezione. La coppia di caratteri [], utilizzata con un range, permette di definire la lunghezza della slice:\n\n\t\t\t\t\tlet a = [0, 1, 2, 3, 4];\n\t\t\t\t\tlet completo = &a[..]; // Una slice contenente tutti gli elementi di a\n\t\t\t\t\tlet mezzo = &a[1..4]; // Una slice contenente solo gli elementi 1, 2, e 3\n\n\t\t\t\tLe slice sono di tipo &[T]. Parleremo di quella T quando tratteremo la genericità.??\n\n\n\t\t\tstr \t\t\t\t\t\t\t4.4.9.2\n\t\t\t\tIl tipo @str di Rust è il tipo di stringa più primitivo. Come tipo unsized, non è molto utile di suo, ma diventa utile quando è utilizzato come riferimento, come per esempio &str. Tratteremo l'argomento in maniera più approfondita quando tratteremo le Stringhe e i riferimenti.\n\n\t\tEnnuple \t\t\t\t\t\t\t4.3.10\n\t\t\tdefinizione\n\t\t\t\tUna ennupla è una lista ordinata di lunghezza fissa. Come questa:\n\t\t\t\t\tlet x = (1, \"ciao\");\n\t\t\t\t\t\t     //lista ordinara 1, ciao nelle ennuple conta l'ordine e\n\t\t\t\t\t\t     possono essere eterogenee\n\n\n\t\t\t\t\tLe parentesi e le virgole formano questa ennupla di lunghezza due. Ecco lo stesso codice, ma con il tipo annotato:\n\n\t\t\t\t\t\tlet x: (i32, &str) = (1, \"ciao\");\n\n\t\t\t\t\tCome si vede, il tipo di una ennupla somiglia all'ennupla, ma in ogni posizione c'è il tipo invece del valore. I lettori attenti noteranno anche che le ENNUPLE SONO ETEROGENEE: in questa ennupla c'è un i32 e un &str. Nei linguaggi di programmazione di sistema, le stringhe sono un pochino più complesse che negli altri linguaggi. Per adesso, si legga &str come slice di stringa, presto impareremo di più a riguardo.\n\n\t\t\t\t\tBIN FRA ENNUPLE\n\t\t\t\t\t\tÈ possibile assegnare un bind su una ennupla ad un'altra ennupla, se entrambe le ennuple contengono gli stessi tipi di dato e hanno la stessa arity (STESSO NUMERO DI ARGOMENTI E STESSA LUNGHEZZA). Le tuple hanno la stessa arity quando hanno la stessa lunghezza.\n\n\t\t\t\t\t\t\t\t//Bind tra ennuple con gli stessi argomenti e stessa lunghezza\n\t\t\t\t\t\t\t\tlet mut x = (1, 2); // x: (i32, i32)\n\t\t\t\t\t\t\t\tlet y = (2, 3); // y: (i32, i32)\n\n\t\t\t\t\t\tSi può accedere ai campi di una ennupla usando un let destrutturante. Ecco un esempio:\n\n\t\t\t\t\t\t\t//pattern dx = sx assegni piu legami\n\t\t\t\t\t\t\tlet (x, y, z) = (1, 2, 3);\n\n\t\t\t\t\t\t\tprintln!(\"x is {}\", x);\n\n\t\t\t\t\t\t\t\tx = y;\n\n\t\t\t\t\t\tQuesto pattern è molto efficace, e lo ritroveremo ripetuto in seguito.\n\n\t\t\t\t\t\tPer discriminare una ennupla con un solo elemento da un valore tra parentesi, basta usare una virgola:\n\n\t\t\t\t\t\t(0,); // ennupla con un solo elemento\n\t\t\t\t\t\t(0); // zero tra parentesi\n\n\t\t\tIndicizzazione delle ennuple \t4.4.10.1\n\t\t\t\t\tI campi di una ennupla possono essere acceduti anche con la sintassi di indicizzazione:\n\n\t\t\t\t\t\tlet ennupla = (1, 2, 3);\n\n\t\t\t\t\t\tlet x = ennupla.0;\n\t\t\t\t\t\tlet y = ennupla.1;\n\t\t\t\t\t\tlet z = ennupla.2;\n\n\t\t\t\t\t\tprintln!(\"x contiene {}\", x);\n\n\t\t\t\t\t\t@differenza@indicizazione_(nelle ennuple l'indicizzazione si fa con il . negli array con le [])\n\t\t\t\t\tL'indicizzazione, come per gli di array, parte da zero, ma diversamente dall'indicizzazione di array, usa un carattere ., invece della coppia di caratteri [].\n\t\tFunzioni\n\t\t\t\t\t\t@puntatore@a@funzione_(puntatore a funzione che restituisce un valore )\n\t\t\t\t\tAnche le funzioni hanno un tipo! Ecco un esempio:\n\t\t\t\t\t\t//creo la funzione foo\n\t\t\t\t\t\tfn foo(x: i32) -> i32 { x }\n\n\t\t\t\t\t\t//let x: fn(i32) = crea un puntatore a funzione che restituisce un i32\n\t\t\t\t\t\tlet x: fn(i32) -> i32 = foo;\n\n\t\t\t\t\tIn questo caso, x è un ‘puntatore a funzione’ che punta a una funzione che prende un i32 e restituisce un i32.\n\n\tCOMMENTI 4.4\n\t\tNote\n\n\t\t\t\t@commenti_(come annotazione e come @documentazione)\n\n\t\t\tI commenti sono annotazioni che si lasciano per gli altri programmatori, per aiutarli a spiegare il proprio codice. Il compilatore per lo più li ignora.\n\n\t\t\tRust ha due tipi di commenti a cui si dovrebbe essere interessati: i commenti di riga e i commenti di documentazione [\"doc comment\"].\n\t\t\t// I commenti di riga sono i caratteri tra la coppia di caratteri ‘//’ e la fine della riga.\n\n\n\t\t\tlet x = 5; // anche questo è un commento di riga\n\n\t\t\t// Se si ha una lunga spiegazione da scrivere, si possono mettere più\n\t\t\t// commenti di riga, uno dopo l'altro. Mettere uno spazio tra // e il testo\n\t\t\t// rende più leggibile il commento.\n\n\t\t\tL'altro genere di commenti è il commento di documentazione. I commenti di documentazione usano /// invece di //, e supportano la notazione Markdown al loro interno:\n\t\t\t\t\t\t/// Aggiunge uno al numero dato.\n\t\t\t\t\t\t///\n\t\t\t\t\t\t/// # Esempi\n\t\t\t\t\t\t///\n\t\t\t\t\t\t/// ```\n\t\t\t\t\t\t/// let cinque = 5;\n\t\t\t\t\t\t///\n\t\t\t\t\t\t/// assert_eq!(6, somma_uno(5));\n\t\t\t\t\t\t/// # fn somma_uno(x: i32) -> i32 {\n\t\t\t\t\t\t/// #     x + 1\n\t\t\t\t\t\t/// # }\n\t\t\t\t\t\t/// ```\n\t\t\t\t\t\tfn somma_uno(x: i32) -> i32 {\n\t\t\t\t\t\tx + 1\n\t\t\t\t\t\t}\n\n\t\t\tC'è un altro stile di commento di documentazione, //!, usato per commentare gli elementi (per es. crate, moduli, o funzioni) che contengono tali commenti, invece che per commentare gli elementi che li seguono. Sono usati tipicamente all'interno delle radici di crate (lib.rs) o delle radici di moduli (mod.rs):\n\n\t\t\t\t//! # The Rust Standard Library\n\t\t\t\t//!\n\t\t\t\t//! The Rust Standard Library provides the essential runtime\n\t\t\t\t//! functionality for building portable Rust software.\n\n\t\t\t\tQuando si scrivono commenti di documentazione, fornire degli esempi di utilizzo è di enorme aiuto. Si noterà che qui abbiamo usato una nuova macro: \n\t\t\t\t\t@assert_eq!. \n\t\t\t\tQuesta macro confronta due valori, e va in panic! se non sono uguali tra di loro. È di grande aiuto nella documentazione. C'è un'altra macro, \n\t\t\t\t\tassert!, \n\t\t\t\tche va in panic! se il valore passatole vale false.\n\n\t\t\t\tSi può usare lo strumento @rustdoc per generare @documentazione @HTML da questi commenti di documentazione, e anche per eseguire gli esempi di codice come collaudo!\n\n\t\tCREARE LA LIBRERIA COMMENTI\n\t\t\tAttenzione per creare la libreria in html occorre la funzione sia pubblica,\n\t\t\t\t1) es. \n\t\t\t\t\t//!main procedura prodotta con cargo.\n\t\t\t\t\t//! # The Rust Standard Library\n\t\t\t\t\t//!\n\t\t\t\t\t//! The Rust Standard Library provides the essential runtime\n\t\t\t\t\t//! functionality for building portable Rust software.\n\n\t\t\t\t\tpub fn main() {\n\t\t\t\t\t\t\n\t\t\t\t\t\tprintln!(\"hello word\");\n\t\t\t\t\t}\n\n\t\t\t\t2) PER CREARE LA LIBRERIA DIGITARE\n\t\t\t\t\tcargo doc\n\t\t\t\t\t\tcrea la libreria html in target/doc ... con html\n\t\t\t\t\tcargo doc --verbose = per visualizzarlo sul terminale\n\n\tIF 4.6\n\t\tNota\n\t\t\t\t@if_(la if e la @elseif )\n\n\t\t\tE semplice\n\t\t\tNel caso dell'if, c'è un valore booleano che conduce a due strade:\n\n\t\t\t\tlet x = 5;\n\n\t\t\t\tif x == 5 {\n\t\t\t\t    println!(\"x vale cinque!\");\n\t\t\t\t}\n\n\t\t\tSe cambiamo il valore di x a qualcos'altro, questa riga non verrebbe stampata. Più specificamente, se l'espressione dopo l'if vale true, allora il blocco viene eseguito; se vale false, no.\n\t\t\tSe si vuole che accada qualcosa caso false, si usa una clausola else:\n\n\t\t\t\tlet x = 5;\n\n\t\t\t\tif x == 5 {\n\t\t\t\t    println!(\"x vale cinque!\");\n\t\t\t\t} else {\n\t\t\t\t    println!(\"x non vale cinque :(\");\n\t\t\t\t}\n\n\t\t\tELSEIF\n\t\t\t\tIf c'è più di un caso, si usa un else if:\n\n\t\t\t\tlet x = 5;\n\n\t\t\t\tif x == 5 {\n\t\t\t\t    println!(\"x vale cinque!\");\n\t\t\t\t} else if x == 6 {\n\t\t\t\t    println!(\"x vale sei!\");\n\t\t\t\t} else {\n\t\t\t\t    println!(\"x non vale né cinque né sei :(\");\n\t\t\t\t}\n\n\t\t\t\tCiò funziona perché l'if è un'espressione. Il valore di tale espressione è il valore dell'ultima espressione della diramazione scelta. Un if senza un else ha sempre il valore ().\n\n\tCICLI\n\t\tLOOP \t\t\t\t\t\t\t\t4.6.1\n\t\t\tIl costrutto @loop (\"ciclo\") è la forma più semplice di ciclo disponibile in Rust. Usando la parola-chiave loop, Rust fornisce un modo di ciclare indefinitamente finché si raggiunge qualche istruzione di terminazione. Il @ciclo @infinito di Rust è fatto così:\n\t\t\t\t//Loop è il costrutto adatto per i cicli infinti\n\t\t\t\tloop {\n\t\t\t\t    println!(\"Cicla per sempre!\");\n\t\t\t\t}\n\n\t\tWHILE\t\t\t\t\t\t\t\t4.6.2\n\t\t\tRust ha anche un @ciclo @while (\"fintanto che\"). È fatto così:\n\n\t\t\t\tlet mut x = 5; // mut x: i32\n\t\t\t\tlet mut fatto = false; // mut fatto: bool\n\n\t\t\t\twhile !fatto {\n\t\t\t\t    x += x - 3;\n\n\t\t\t\t    println!(\"{}\", x);\n\n\t\t\t\t    if x % 5 == 0 {\n\t\t\t\t        fatto = true;\n\t\t\t\t    }\n\t\t\t\t}\n\n\t\t\tI cicli while sono la scelta appropriata quando non si è sicuri di quante volte si dovrà ciclare.\n\n\t\t\tSe serve un ciclo infinito, si può essere tentati di scrivere:\n\n\t\t\t\twhile true {Run\n\t\t\t\tTuttavia, il costrutto loop è molto più adatto per gestire questo caso:\n\n\t\t\t\tloop {\n\n\n\t\t\tL'analisi del flusso di costrutto di Rust tratta questo costrutto diversamente da un while true, dato che sappiamo che ciclerà per sempre. In generale, più informazione possiamo dare al compilatore, meglio può fare con la sicurezza e la generazione del codice, e perciò si dovrebbe sempre preferire loop quando si intende ciclare indefinitamente.\n\n\t\tFOR \t\t\t\t\t\t\t\t4.6.3\n\t\t\tIl ciclo for viene usato per ciclare un particolare numero di volte. Però i cicli for di Rust funzionano un po' diversamente dagli altri linguaggi di sistema. Il ciclo for di Rust non somiglia al ciclo for del linguaggio C:\n\t\t\t\t//ciclo for in c\n\t\t\t\tfor (x = 0; x < 10; x++) {\n\t\t\t\t\t    printf( \"%d\\n\", x );\n\t\t\t\t\t}\n\n\t\t\tInvece, è fatto così:\n\t\t\t\t//@ciclo@for_(in rut con 0..10 con posizioni 0 fino a 9 l'ultimo escluso)\n\t\t\t\t\n\t\t\t\tfor x in 0..10 {\n\t\t\t\t    println!(\"{}\", x); // x: i32\n\t\t\t\t}\n\n\t\t\t\to, in termini più astratti,\n\n\t\t\t\t\t\tfor var in expression {\n\t\t\t\t\t\t    code\n\t\t\t\t\t\t}\n\t\t\t\tL'espressione è un elemento che può essere convertito in un [iteratore] usando IntoIterator. L'iteratore rende una serie di elementi. Ogni elemento è un'iterazione del ciclo. Tale valore viene poi associato al nome var, che è valido solo nel corpo del ciclo. Una volta che il corpo è finito, il prossimo valore viene preso dall'iteratore, e si esegue un'altra iterazione. Quando non ci sono più valori, il ciclo for è finito.\n\n\t\t\tPOSIZIONI INIZIO E FINE: \n\t\t\t\tNel nostro esempio, 0..10 è un'espressione che prende una posizione di inizio e una di fine, e dà un iteratore su quei valori. Tuttavia, il limite superiore è escluso, così che questo ciclo stamperà i numeri da 0 a 9, e non il 10.\n\n\t\t\t\tRust non ha il ciclo for in \"stile C\" di proposito. Controllare manualmente ogni elemento del ciclo è complicato e soggetto a errori, anche per sviluppatori esperti nel linguaggio C.\n\n\n\t\t\tEnumerazione\n\t\t\t\t\t@for@controllo@ciclo_(per tener traccia dei @cicli usare @enumerate)\n\t\t\t\tQuando c'è bisogno di tener traccia di quante volte si ha già ciclato, si può usare la funzione .enumerate().\n\n\t\t\t\tfor (i, j) in (5..10).enumerate() { //for con enumerate per contare i cicli\n\t\t\t\t\t    println!(\"i = {} e j = {}\", i, j);\n\t\t\t\t\t}\n\t\t\t\t\tEmette:\n\n\t\t\t\t\ti = 0 e j = 5\n\t\t\t\t\ti = 1 e j = 6\n\t\t\t\t\ti = 2 e j = 7\n\t\t\t\t\ti = 3 e j = 8\n\t\t\t\t\ti = 4 e j = 9\n\t\t\t\t\tIn questo caso si devono aggiungere le parentesi intorno al range.\n\n\t\t\tSugli @iteratori:\n\n\n\t\t\t\t//for su due linee di una stringa\n\t\t\t\tlet linee = \"ciao\\nmondo\".lines();\n\n\t\t\t\t\tfor (numerolinea, linea) in linee.enumerate() {\n\t\t\t\t\t    println!(\"{}: {}\", numerolinea, linea);\n\t\t\t\t\t}\n\t\t\t\t\tEmette:\n\n\t\t\t\t\t0: ciao\n\t\t\t\t\t1: mondo\n\n\t\t\tTerminare precocemente l'iterazione\n\t\t\t\t\tDiamo un'occhiata a quel ciclo while di prima:\n\n\t\t\t\t\t\tlet mut x = 5;\n\t\t\t\t\t\tlet mut fatto = false;\n\n\t\t\t\t\t\twhile !fatto {\n\t\t\t\t\t\t    x += x - 3;\n\n\t\t\t\t\t\t    println!(\"{}\", x);\n\n\t\t\t\t\t\t    if x % 5 == 0 {\n\t\t\t\t\t\t        fatto = true;\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\n\t\t\t\t\tAbbiamo dovuto tenere apposta una variabile booleana, fatto, per sapere quando dovremmo uscire dal ciclo. Rust ha due parole-chiave per aiutarci a modificare le iterazioni: break (\"interrompi\") e continue (\"continua\").\n\n\n\t\t\t\t\tIn questo caso, possiamo scrivere il ciclo in un modo migliore usando break:\n\n\t\t\t\t\t\tlet mut x = 5;\n\n\t\t\t\t\t\tloop {//ciclo @loop@infinito_(con interuzione con break)\n\t\t\t\t\t\t    x += x - 3;\n\n\t\t\t\t\t\t    println!(\"{}\", x);\n\n\t\t\t\t\t\t    if x % 5 == 0 { break; }\n\t\t\t\t\t\t}\n\n\t\t\t\t\tAdesso cicliamo per sempre usando loop e usiamo break per uscire precocemente. Anche eseguire un'istruzione return potrebbe servire a terminare il ciclo precocemente.\n\n\t\t\t\t\tcontinue è simile, ma invece di terminare il ciclo, passa alla prossima iterazione. Questo codice stamperà solamente i numeri dispari:\n\n\t\t\t\t\t\tfor x in 0..10 {\n\t\t\t\t\t\t\t//stampa solo i dispari\n\t\t\t\t\t\t    if x % 2 == 0 { continue; }\n\n\t\t\t\t\t\t    println!(\"{}\", x);\n\t\t\t\t\t\t}\n\n\t\t\tEtichette dei cicli\n\t\t\t\t\t\t\t@etichetta_(per i @cicli@esterni )\n\n\t\t\t\t\tSi potrebbero anche incontrare situazioni in cui ci sono @cicli @annidati si vuole specificare a quale ciclo si riferisce una particolare istruzione @break o @continue. Come nella maggior parte degli altri linguaggi, di default an'istruzione break o continue si applicheranno al ciclo più @interno. Dove si volesse applicare break o continue a uno dei @cicli @esterni, si possono usare delle etichette. Il seguente codice stamperà solamente quando sia x che y sono dispari:\n\n\t\t\t\t\t\t'esterno: for x in 0..10 {\n\t\t\t\t\t\t    'interno: for y in 0..10 {\n\t\t\t\t\t\t        if x % 2 == 0 { continue 'esterno; } // continua al ciclo su x\n\t\t\t\t\t\t        if y % 2 == 0 { continue 'interno; } // continua al ciclo su y\n\t\t\t\t\t\t        println!(\"x: {}, y: {}\", x, y);\n\t\t\t\t\t\t    }\n\n    VETTORI 4.7\n    \tDefinizione\t\t\t\t\t\t\t4.7.1\n    \t\t\t@vettori_(il @vettore è un @array@dinamico ed estensibile con il tipo @Vec<T>)\n\n    \t\tUn ‘vettore’ è un @array @dinamico ossia ‘estendibile’, implementato dal tipo Vec<T> nella libreria standard. Il T significa che si possono avere vettori di ogni tipo (si veda il capitolo su [generici][generic] per avere maggiori informazioni). I VETTORI ALLOCANO SEMPRE I LORO DATI NELLO @HEAP. Possono essere creati con la macro vec!:\n    \t\t\tlet v = vec![1, 2, 3, 4, 5]; // v: Vec<i32> !=macro che usa [] ma anche ()\n\n    \t\t\t(Si noti che diversamente dalla macro println! che abbiamo usato in passato, con la macro vec! usiamo le parentesi quadre []. Rust permette di usare entrambi i tipi di parentesi in entrambe le situazioni, questo uso è solo una convenzione.)\n\n\t\t\tC'è una forma alternativa di vec! per ripetere un valore iniziale:\n\t\t\t\tlet v = vec![0; 10]; // dieci zeri\n\n\t\t\tI vettori immagazzinano il loro contenuto sullo heap come array contigui di T. Ciò significa che devono essere capaci di sapere la dimensione di T in fase di compilazione (cioè, quanti byte servono per memorizzare un T?). La dimensione di alcuni oggetti non si può sapere in fase di compilazione. Per tali oggetti si dovrà immagazzinare un puntatore a quell'oggetto: fortunatamente, il tipo Box funziona perfettamente a questo scopo.\n\n\t\tAccedere agli elementi\t\t\t\t4.7.2\n\t\t\tPer ottenere il valore a un particolare indice nel vettore, si usano le []:\n\t\t\t\tlet v = vec![1, 2, 3, 4, 5];\n\n\t\t\t\tprintln!(\"Il terzo elemento di v è {}\", v[2]);\n\n\t\t\tGli indici contano da 0, e perciò il terzo elemento è v[2].\n\n\t\t\tÈ anche importante notare che si deve indicizzare con il tipo usize:\n\n\t\t\t\tlet v = vec![1, 2, 3, 4, 5];\n\n\t\t\t\tlet i: usize = 0;\t//il vettore si deve indicizzare come tipo usize\n\t\t\t\tlet j: i32 = 0;\t\t\n\n\t\t\t\t// funziona\n\t\t\t\tv[i];\n\n\t\t\t\t// non funziona da errore non puoi indicizzarlo come i32 ma deve essere usize\n\t\t\t\tv[j];\n\n\t\tAccesso fuori dai limiti\t\t\t4.7.3\n\t\t\tSe si prova ad accedere un indice che non esiste:\n\t\t\t\tlet v = vec![1, 2, 3];\n\t\t\t\tprintln!(\"L'elemento 7 è {}\", v[7]);\n\n\t\t\tallora il thread attuale andrà in [panico] con un messaggio come questo:\n\t\t\t\tthread 'main' panicked at 'index out of bounds: the len is 3 but the index is 7'\n\n\n\t\t\tSe si vuole gestire gli errori di accesso fuori dai limiti senza andare in panico, si possono usare metodi come get o get_mut, che restituiscono None quando gli viene dato un indice invalido:\n\n\t\t\t\tlet v = vec![1, 2, 3];\n\t\t\t\t\tmatch v.get(7) {  //gestione fuori indice con il @match\n\t\t\t\t\t    Some(x) => println!(\"Item 7 is {}\", x),\n\t\t\t\t\t    None    => println!(\"Spiacente, questo vettore è troppo corto.\")\n\t\t\t\t\t}\n\t\t\n\t\tIterare \t\t\t\t\t\t\t4.7.4\n\t\t\tUna volta che si ha un vettore, si può iterare sui suoi elementi usando for. Ce ne sono tre versioni:\n\n\t\t\t\tlet mut v = vec![1, 2, 3, 4, 5];\n\n\t\t\t\t\tfor i in &v {\n\t\t\t\t\t    println!(\"Un riferimento a {}\", i);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor i in &mut v {\n\t\t\t\t\t    println!(\"Un riferimento mutabile a {}\", i);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor i in v {\n\t\t\t\t\t    println!(\"Prendi il possesso del vettore e del suo elemento {}\", i);\n\n\t\t    CON RIFERIMENTO & PUOI ITERARE PIU VOLTE IL VETTORE \n\t\t    \tNota: Non si può usare ancora il vettore dopo averlo iterato prendendone il possesso. Invece, si può iterare il vettore più volte se quando lo si itera se ne prende un riferimento. Per esempio, il seguente codice non compila.\n\n\n\t\t    \tlet v = vec![1, 2, 3, 4, 5];\n\n\t\t\t\t\t//I° ITERAZIONE con presa in possesso\n\t\t\t\t\tfor i in v {\n\t\t\t\t\t    println!(\"Prendi possesso del vettore e del suo elemento {}\", i);\n\t\t\t\t\t}\n\n\t\t\t\t\t//ERRORE = la II° iterazione con presa di posse non compila occorre il riferimento &\n\t\t\t\t\tfor i in v {\n\t\t\t\t\t    println!(\"Prendi possesso del vettore e del suo elemento {}\", i);\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\tMentre il seguente funziona perfettamente:\n\n\t\t\t\t\tlet v = vec![1, 2, 3, 4, 5];\n\n\t\t\t\t\t//I iterazione con riferimento\n\t\t\t\t\tfor i in &v {\n\t\t\t\t\t    println!(\"Questo è un riferimento a {}\", i);\n\t\t\t\t\t}\n\n\t\t\t\t\t//II iterazione con riferimento\n\t\t\t\t\tfor i in &v {\n\t\t\t\t\t    println!(\"Questo è un riferimento a {}\", i);\n\t\t\t\t\t}\n\n\tPOSSESSO 4.8\n\t\tNote\n\t\t\tQuesta è la prima delle tre sezioni che presentano il sistema di possesso di Rust. Questa è una delle caratteristiche più distintive e avvincenti di Rust, con la quale gli sviluppatori Rust dovrebbero diventare familiari. Il possesso è il modo in cui Rust raggiunge il suo maggior obiettivo, la sicurezza di accesso alla memoria. Ci sono alcuni concetti distinti, ognuno descritto in una sezione distinta:\n\n\t\t\til possesso, che è la sezione attuale\n\t\t\ti prestiti, e le caratteristiche a loro associate, i ‘riferimenti’\n\t\t\ti tempi di vita, un avanzato concetto di prestito\n\t\t\tQueste tre sezioni sono correlate, e seguono un ordine. Bisognerà leggerli tutti e tre per capire pienamente il sistema di possesso.\n\n\t\t\n\t\tMeta\t\t\t\t\t\t\t\t4.8.1\n\t\t\tRust ha un'attenzione particolare sulla sicurezza e sulla velocità. Raggiunge questi obiettivi tramite molte ‘ASTRAZIONI A COSTO ZERO’, il che significa che in Rust, le astrazioni costano il meno possibile al fine di farle funzionare. Il sistema di possesso è un esempio primario di astrazione a costo zero. Tutta l'analisi di cui parleremo in questa guida viene fatta in fase di compilazione. Non si paga nessun costo in fase di esecuzione per queste funzionalità.\n\t\t\tIl costo sono i tempi di apprendimento in quanto si combatte con il verificatore di possesso perché il modello mentale del programmatore di come il possesso dovrebbe funzionare non combacia con le regole effettivamente implementate da Rust ma col tempo si migliora.\n\n\n\t\tPossesso\t\t\t\t\t\t\t4.8.2\n\t\t\tI legami di variabili hanno una proprietà in Rust: ‘possiedono’ quello a cui sono legati. Ciò significa che quando un legame esce di ambito, Rust libererà le risorse legate. Per esempio:\n\n\t\t\t\tfn foo() {\n\t\t\t\t    let v = vec![1, 2, 3];  //vettore che viene messo sull'heap gli elementi + nello stack il vettore\n\n\t\t\t\t}\n\n\t\t\tQuando v viene nell'ambito, \n\t\t\t\tviene creato un nuovo vettore sullo STACK, \n\t\t\t\te alloca spazio sullo HEAP per i suoi elementi. \n\t\t\tQuando v esce di ambito alla fine di foo(), Rust ripulirà ogni cosa correlata al vettore, anche la memoria allocata sullo heap. Questo avviene deterministicamente alla fine dell'ambito.\n\n\t\tSemantica di spostamento\t\t\t4.8.3\n\t\t\tPerò qui c'è qualche \n\t\t\t\taltra sottigliezza: \n\t\t\t\t\tRUST ASSICURA CHE CI SIA ESATTAMENTE UN LEGAME A OGNI DATA RISORSA. Per esempio, se abbiamo un vettore, possiamo assegnarlo a un altro legame:\n\n\t\t\t\t\t\tlet v = vec![1, 2, 3];\n\t\t\t\t\t\tlet v2 = v;  //vettore v assegnato a v2 ma v perde il legame\n\t\t\t\t\t\n\t\t\t\t\tMa, se dopo proviamo a usare v, otteniamo un errore:\n\t\t\t\t\tL'errore si presenta così:\n\t\t\t\t\t\tlet v = vec![1, 2, 3];\n\t\t\t\t\t\t\tlet v2 = v;   //il legame v viene assegnato a v2\n\t\t\t\t\t\t\tprintln!(\"v[0] vale: {}\", v[0]);  //ma v perde il legame\n\n\t\t\t\t\t\terror: use of moved value: `v`\n\t\t\t\t\t\tprintln!(\"v[0] vale: {}\", v[0]);\n\n\t\t\tANCHE LA FUNZIONE PERDE IL LEGAME DELL'ARGOMENTO\n\t\t\t\tUna cosa simile accade se definiamo una funzione che prende possesso dell'argomento, e proviamo a usare qualcosa dopo che l'abbiamo passato come argomento:\n\t\t\t\t\t//la funnzione prende il possesso dell'argomento\n\t\t\t\t\tfn prendi(v: Vec<i32>) {\n\n\t\t\t\t\t    // ciò che accade qui dentro non è importante.\n\t\t\t\t\t}\n\n\t\t\t\t\tlet v = vec![1, 2, 3]; //Legame v che viene passato alla funzione \n\t\t\t\t\t\t\t\t\t\t\tprendi\n\t\t\t\t\tprendi(v);  //passo il legame alla funzione\n\n\t\t\t\t\tprintln!(\"v[0] vale: {}\", v[0]); //legame perso con la fine della\n\t\t\t\t\t \t\t\t\t\t\t\t\tfunzione.\n\n\t\t\t\tStesso errore: ‘use of moved value’. Quando si trasferisce il possesso di un oggetto da un legame a un altro, si dice che l'oggetto a cui si fa riferimento è stato ‘spostato’. Qui non ci vuole qualche sorta di annotazione speciale, è il normale comportamento di Rust.\n\n\n\t\tI dettagli\t\t\t\t\t\t\t4.8.4\n\t\t\tDopo lo spostamento dell'oggetto il legame non puo essere piu utilizzato. \n\t\t\tQuando scriviamo del codice come questo:\n\n\t\t\t\tlet x = 10;  //x = oggetto x va nello stack mentre per 10; il riferimento del valore 10 nell'heap\n\n\t\t\tRust alloca sullo stack della memoria per un intero i32, copia i bit che rappresentano il valore 10 alla memoria allocata, e lega il nome della variabile x a questa regione di memoria per poterna riferire in seguito.\n\n\t\t\tAdesso consideriamo il seguente frammento di codice:\n\t\t\t\t//l'oggetto let v = memorizzato nello statck\n\t\t\t\tlet v = vec![1, 2, 3];  // per i valori [1, 2, 3]; vie copiato il \n\t\t\t\t\t\t\t\t\t\t   riferimento nell'heap al primo numero\n\t\t\t\tlet mut v2 = v;\n\n\t\t\tMa in aggiunta a ciò, alloca anche della memoria sullo heap per i dati effettivi ([1, 2, 3]). \n\t\t\tRust copia l'indirizzo di questa allocazione sullo heap al puntatore interno, che fa parte dell'oggetto vettore posto sullo stack (chiamiamolo \"puntatore ai dati\").\n\n\t\t\tVETTORE NELLO STACK - DATI NELL'HEAP = Vale la pena evidenziare (anche al rischio di affermare l'ovvio) che \n\t\t\t\tl'oggetto vettore e i suoi dati \n\t\t\tvivono in regioni di memoria separate, invece di essere un'unica allocazione di memoria contigua (a causa di ragioni che non approfondiremo in questo momento). Queste due parti del vettore (quella sullo stack e quella sullo heap) devono accordarsi l'un l'altra in ogni momento riguardo a cose come la lunghezza, la capacità, ecc.\n\n\t\t\tQuando si sposta v in v2, Rust effettivamente fa una copia bit-a-bit dell'oggetto vettore v nell'allocazione sullo stack rappresentata da v2. Questa copia superficiale non crea una copia dell'allocazione sullo heap contenente i dati effettivi. Il che significa che ci sarebbero due puntatori al contenuto del vettore entrambi che puntano alla stessa allocazione di memoria sullo heap. Se si potesse accedere sia a v che a v2 nello stesso tempo, si violerebbe la garanzia di sicurezza di Rust, introducendo un'accesso concorrente ai dati.\n\n\t\tI tipi Copy\t\t\t\t\t\t\t4.8.5\n\t\t\tI tipi primativi tipo bool, i32 ecc utilizzano copy e quindi quando \n\t\t\tassegni u i32 con \n\t\t\t\tlet v1=1;\n\t\t\t\tlet v2=v1;\n\t\t\t\tprintln!(\"v vale: {}\", v); //i32 non ha puntatori ai dati ma utilizza\n\t\t\t\t\t\t\t\t\t\t\tCopy e quindi si fa una copia integrale dei dati.\n\t\tOltre al possesso\t\t\t\t\t4.8.6\n\t\t\tal posto della restituzione attivo il prestito\n\n\tRIFERIMENTI E PRESTITI 4.9\n\t\n\t\tBorrowing (@PRESTITO)\t\t\t\t4.9.1 \n\t\t\tPrendere in prestito\n\t\t\t\tAlla fine della sezione sul possesso, avevamo una brutta funzione che si presentava così:\n\n\t\t\t\t\tfn foo(v1: Vec<i32>, v2: Vec<i32>) -> (Vec<i32>, Vec<i32>, i32) {\n\t\t\t\t\t    // fa' qualcosa con v1 e con v2\n\n\t\t\t\t\t    // restituisci il possesso di v1 e v2, e restituisci anche\n\t\t\t\t\t    // il risultato della nostra funzione\n\t\t\t\t\t    (v1, v2, 42)\n\t\t\t\t\t}\n\n\t\t\t\t\tlet v1 = vec![1, 2, 3];\n\t\t\t\t\tlet v2 = vec![1, 2, 3];\n\t\t\t\t\tlet (v1, v2, risposta) = foo(v1, v2);\n\n\n\t\t\t\tPerò questo non è tipico di Rust, dato che non sfrutta i prestiti. Ecco il primo passo:\n\n\t\t\t\t\t\tfn foo(v1: &Vec<i32>, v2: &Vec<i32>) -> i32 {\n\t\t\t\t\t\t    // fa' qualcosa con v1 e con v2\n\n\t\t\t\t\t\t    // restituisci la risposta\n\t\t\t\t\t\t    42\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet v1 = vec![1, 2, 3];\n\t\t\t\t\t\tlet v2 = vec![1, 2, 3];\n\n\t\t\t\t\t\tlet risposta = foo(&v1, &v2);\n\n\t\t\t\tUn esempio più concreto:\n\n\t\t\t\t\tfn main() {\n\t\t\t\t\t\t//vedi il codice qui: @esempio_(@prestito valori)\n\t\t\t\t\t    // Non importa se non si capisce cosa fa `fold`, quello che importa\n\t\t\t\t\t    // qui è che un riferimento immutabile viene preso in prestito.\n\t\t\t\t\t    fn somma_vec(v: &Vec<i32>) -> i32 {\n\t\t\t\t\t        return v.iter().fold(0, |a, &b| a + b);\n\t\t\t\t\t    }\n\t\t\t\t\t    // Prendi in prestito due vettori e sommane gli elementi.\n\t\t\t\t\t    // Questo tipo di prestito non permette che gli oggetti siano mutati.\n\t\t\t\t\t    fn foo(v1: &Vec<i32>, v2: &Vec<i32>) -> i32 {\n\t\t\t\t\t        // fa' qualcosa con v1 e con v2\n\t\t\t\t\t        let s1 = somma_vec(v1); //s1 e s2 non possono essere mutati\n\t\t\t\t\t        let s2 = somma_vec(v2);\n\t\t\t\t\t        // restituisci la risposta senza modifiche\n\t\t\t\t\t        s1 + s2\n\t\t\t\t\t    }\n\n\t\t\t\t\t    let v1 = vec![1, 2, 3];\n\t\t\t\t\t    let v2 = vec![4, 5, 6];\n\n\t\t\t\t\t    let risposta = foo(&v1, &v2);\n\t\t\t\t\t    println!(\"{}\", risposta);\n\t\t\t\t\t}\n\n\t\t\t\t\tInvece di prendere dei Vec<i32> come argomenti, prendiamo dei riferimenti: &Vec<i32>. \n\t\t\t\t\tE invece di passare v1 e v2 direttamente, passiamo &v1 e &v2. \n\n\t\t\t\t\tIl tipo &T viene chiamato ‘riferimento’, e invece di possedere la risorsa, ne prende in prestito il possesso. \n\n\t\t\t\t\tUn legame che prende in prestito qualche oggetto non dealloca quella risorsa quando esce dall'ambito. Ciò significa che dopo la chiamata a foo(), possiamo usare ancora i nostri legami originali.\n\n\t\t\t\t\tATTENZIONE RIFERIMENTI IMMUTABILI\n\t\t\t\t\t\tI riferimenti sono immutabile, come i legami. Ciò significa che dentro foo(), i due vettori non possono affatto essere modificati:\n\n\t\t\t\t\t\t\tfn foo(v: &Vec<i32>) {\n\t\t\t\t\t\t\t     v.push(5);  //SE MODIFICHI IL VETTORE ERRORE PERCHE IL\n\t\t\t\t\t\t\t     \t\t\t//PRESTITO E' IMMUTABILE\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet v = vec![];\n\n\t\t\t\t\t\t\tfoo(&v);\n\t\t\t\t\t\t\tci darà questo errore:\n\n\t\t\t\t\t\t\terror: cannot borrow immutable borrowed content `*v` as mutable\n\t\t\t\t\t\t\tv.push(5);\n\t\t\t\t\t\t\t^\n\t\t\t\t\t\t\tAggiungere un valore (chiamando push) muterebbe il vettore, e quindi non ci viene permesso.\n\n\t\ti riferimenti &mut \t\t\t\t\t4.9.2\n\t\t\t\t@come@modificare_(la risorsa presa in prestito)\n\t\t\tC'è un altro tipo di riferimenti: &mut T. Un ‘riferimento mutabile’ permette di mutare la risorsa che viene presa in prestito. Per esempio:\n\t\t\t\tlet mut x = 5;    //x legame mut\n\t\t\t\t\t{\n\t\t\t\t\t    let y = &mut x; //y= riferimento mutabile a x perche &mut x\n\t\t\t\t\t    \t\t\t\t//preso in prestito da x e così puo essere incrementato\n\t\t\t\t\t    // *y = asterico prima di y per accesso al riferimento sia  se\n\t\t\t\t\t    //      mutabile o non è mutabile\n\t\t\t\t\t    *y += 1;\t//incrementi perchè marcato con &mut ..\n\t\t\t\t\t}\n\t\t\t\t\tprintln!(\"{}\", x);  //stampa 6\n\n\t\t\tAbbiamo creato y come riferimento mutabile a x, e poi abbiamo incrementato l'oggetto a cui y punta. Si noterà che abbiamo dovuto marcare anche x come mut. Se non l'avessimo fatto, non avremmo potuto prendere in prestito mutabile un valore immutabile.\n\n\t\t\tPERCHE' * = ACCESSO AL RIFERIMENTO MUTABILE O NON MUTABILE\n\t\t\t\tSi noterà anche che abbiamo aggiunto un asterisco (*) prima di y, rendendolo *y. Questo è necessario perché y è un riferimento. SI deve usare un asterisco per accedere al contenuto di un riferimento, che sia mutabile o immutabile.\n\n\t\tle regole\t\t \t\t\t\t\t4.9.2\n\t\t\tEcco le regole per prendere a prestito in Rust:\n\t\t\t\tAMBITO DEL PRESTITO <= A QUELLO DEL POSSESSORE = Primo, ogni prestito deve durare per un ambito non più esteso di quello del possessore.\n\t\t\t\t\t@prestito_(in Rust deve rimanere nell'ambito per cui è valido\n\t\t\t\t\te per fare un prestito occorre &T = prestito non mutabile)\n\t\t\t\t\n\n\t\t\t\tSecondo, si può avere uno o l'altro dei due seguenti generi di prestiti, ma non entrambi allo stesso tempo:\n\t\t\t\t\t\t@riferimenti_@immutabili_o_@mutabili_(per fare un prestito in rust occorre &T e se mutabile &mut T:\n\t\t\t\t\t\t\t @&T= prestito immutabile; \n\t\t\t\t\t\t\t @&mut T =  prestito @mutabile )\n\n\t\t\t\tA) uno o più riferimenti non mutabili (&T) a un oggetto,\n\t\t\t\tB) esattamente un riferimento mutabile (&mut T) a un oggetto.\n\n\t\t\t\tCORSA AI DATI =  C'è una ‘@corsa @ai @dati’ @data@race quando due o più puntatori accedono alla medesima posizione di memoria nello stesso tempo, e per almeno uno di essi tale accesso è in scrittura, e tali accessi non sono sincronizzati.\n\n\t\t\t\tTANTI RIFERIMENTI MUTABILE SOLO UNO MUTABILE ALLA VOLTA = Per quanto riguarda i riferimenti immutabili, se ne possono avere quanti se ne vogliono, dato che nessuno di essi sta scrivendo. Però, dato possiamo avere solamente un riferimenti mutabili per volta, è impossibile avere una corsa ai dati. Questa tecnica consente a RUST IN FASE DI COMPILAZIONE DI PREVENIRE LE CORSE AI DATI: otterremmo degli errori se violiamo le regole.\n\t\t\t\tTenendo questo a mente, consideriamo ancora il nostro esempio.\n\n\n\n\n\n\t\tPensare secondo gli ambiti\t\t\t4.9.3\n\t\t\t\n\t\t\t//il prestito mutabile valido e parte da x e finisce alla graffa finale,\n\t\t\t// l'ambita parte da --> { .... e finisce con ---> }\n\t\t\tfn main() {\n\t\t\t\t\t'//prestito mutabile parte qui'\n\t\t\t\t    let mut x = 5;\t\t//&mut T = riferimento MUTABILE di x\n\t\t\t\t    let y = &mut x;     //&mut T = faccio il prestito mutabile di x\n\t\t\t\t    \t\t\t\t\t// a y\n\n\t\t\t\t    *y += 1;\t\t\t//prendo il riferimento con *Y = puntatore e lo\n\t\t\t\t    \t\t\t\t\t// incremento\n\t\t\t\t    \t\t\t\t\t//fino qui il prestito è mutabile e x non è piu\n\t\t\t\t    \t\t\t\t\t// possessore\n\n\t\t\t\t    println!(\"{}\", x);\t//da errore il prestito è sempre nell'ambito di y\n\t\t\t\t    \t\t\t\t\t//fino nell'ambito delle graffe e quindi mutabile e non è tornato a x come immutabile\n\n\t\t\t\t} //prestito mutabile valido fino a fine programma \n\n\t\t\t\t\tQuesto codice ci dà questo errore:\n\n\t\t\t\t\terror: cannot borrow `x` as immutable because it is also borrowed as mutable\n\t\t\t\t\tErrore: Impossibile prendere in prestito 'X' come immutabile perché è anche preso in prestito come mutabile\n\n\t\t\t\t\t    println!(\"{}\", x);\n\t\t\t\t\t                   ^\n\n                   Questo perché abbiamo violate le regole: abbiamo un &mut T (mutabile) che punta a x, e così non ci è permesso creare dei &T (immutabili) che puntino al medesimo oggetto. È l'uno o l'altro. L'annotazione suggerisce come pensare a questo problema:\n\n\t\t\t\t\t\tnote: previous borrow ends here\n\t\t\t\t\t\tNota: il prestito precedente termina qui\n\t\t\t\t\t\tfn main() {\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t^\n\n\t\t\t\t\tIL PRESTITO MUTABILE VIENE TENUTO PER TUTTO IL PROGRAMMA: In altre parole, il prestito mutabile viene tenuto per tutto il resto del programma. \n\n\t\t\t\t\tCiò che vogliamo è che il prestito mutabile a y finisca, così che la risorsa possa essere restituita al possessore, x. \n\n\t\t\t\t\tPoi x può fornire un prestito immutabile a println!. \n\n\t\t\t\t\tIn Rust, prendere a prestito è legato all'ambito per cui il prestito è valido. E il nostro ambito si presenta così:\n\n\n\t\t\t\t\t\tfn main() {\n\t\t\t\t\t\t    let mut x = 5;     //rende mutabile x\n\n\t\t\t\t\t\t    let y = &mut x;    // -+ qui inizia il prestito mutabile di \n\t\t\t\t\t\t    \t\t\t\t\t\tx \n\t\t\t\t\t\t                       //  |\n\t\t\t\t\t\t    *y += 1;           //  |\n\t\t\t\t\t\t                       //  |\n\t\t\t\t\t\t    println!(\"{}\", x); // -+ - qui prova a prendere a prestito \n\t\t\t\t\t\t    \t\t\t\t\t     immutabile x\n\t\t\t\t\t\t}                      // -+ qui finisce il prestito mutabile di \n\t\t\t\t\t\t\t\t\t\t\t\t\t x\n\t\t\t\t\t\t                       \n\t\t\t\t\t\t Gli ambiti sono in conflitto: non possiamo fare un &x mentre y è nell'ambito.\n\n\n\t\t\t\t\t \tAMBITO CHIAVE DEL PRESTITO\n\t\t\t\t\t\t Perciò quando aggiungiamo le graffe:\n\n\t\t\t\t\t\t\tlet mut x = 5;\n\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t    let y = &mut x; // -+ qui inizia il prestito mutabile\n\t\t\t\t\t\t\t    *y += 1;        //  |\n\t\t\t\t\t\t\t}                   // -+ ... e qui finisce\n\n\t\t\t\t\t\t\tprintln!(\"{}\", x);  // <- qui prova a prendere a prestito immutabile x\n\t\t\t\t\t\t\tNon c'è problema. Il nostro prestito mutabile esce di ambito prima che venga creato quello immutabile. Perciò l'ambito è la chiave per vedere quanto dura un prestito.\n\t\t\t\t\t\t\tvedi --->  @esempio@di_(area scope di y)\n\n\n\n\n\t\tDifetti prevenuti dai prestiti\t\t4.9.4\n\t\t\t\t\tPerché ci sono queste regole restrittive? Beh, come abbiamo detto, queste regole prevengono le corse ai dati. Le corse ai dati che genere di difetti provocano? Ecconi alcuni.\n\n\t\t\tInvalidazione degli iteratori\t\t4.9.4.1\n\t\t\t\tUn esempio è l'‘invalidazione degli iteratori’, che avviene quando si prova a mutare una collezione su cui si sta iterando. Il verificatore dei prestiti di Rust previene che accada:\n\n\t\t\t\t\tlet mut v = vec![1, 2, 3];\n\n\t\t\t\t\t\tfor i in &v {\n\t\t\t\t\t\t    println!(\"{}\", i);\n\t\t\t\t\t\t}\n\n\t\t\t\tQuesto codice stampa i numeri da uno a tre. Mentre iteriamo lungo il vettore, ci vengono dati solamente dei riferimenti agli elementi. E v è esso stesso preso in prestito come immutabile, il che significa che non possiamo cambiarlo mentre stiamo iterando:\n\n\t\t\t\tlet mut v = vec![1, 2, 3];\n\n\t\t\t\t\tfor i in &v {\n\t\t\t\t\t    println!(\"{}\", i);  //fino qui &v = immutabile\n\t\t\t\t\t    v.push(34);\t\t\t//no push perchè È IMMUTABILE\n\t\t\t\t\t}\n\n\n\t\t\t\tcannot borrow `v` as mutable because it is also borrowed as immutable\n    \t\t\tv.push(34);\n\n    \t\t\t non può prendere in prestito 'v' come mutevole perché è anche preso in prestito come immutabile v.push(34);\n\n    \t\t\tnote: previous borrow of `v` occurs here; the immutable borrow prevents\n\t\t\t\t\tsubsequent moves or mutable borrows of `v` until the borrow ends\n\t\t\t\t\tfor i in &v {\n\t\t\t\t\t          ^\n\n\t          \tNota: qui si verifica il precedente prestito di 'V'; Il prestito immutabile impedisce\n\t\t\t\t\tMosse successive o prestiti mutevoli di 'V' fino alla fine del prestito\n\t\t\t\t\tper i in &v {\n\t\t\t\t\t          ^\n\n\t          \tNon possiamo modificare v perché è preso in prestito dal ciclo.\n\n\t\tUso dopo il rilascio\t\t\t\t4.9.4.2\n\n\t\t\tRIFERIMENTO NON PIU LUNGI DELLA VITA DELL'OGGETTO DI RIFERIMENTO\n\t\t\tI riferimenti non devono vivere più a lungo dell'oggetto a cui fanno riferimento. Rust verificherà gli ambiti dei riferimenti per assicurare che sia così.\n\n\t\t\tSe Rust non verificasse questa proprietà, potremmo accidentalmente usare un oggetto che è diventato invalido. Per esempio:\n\n\n\t\t\t\tlet y: &i32;\n\t\t\t\t\t{\n\t\t\t\t\t    let x = 5;  //creo il legame con x\n\t\t\t\t\t    y = &x;\t\t//faccio un riferimento a x per assegnarlo a Y \n\t\t\t\t\t    \t\t\t//che ha valore finche esiste x\n\t\t\t\t\t}\n\n\t\t\t\t\t//fuori dell'ambito di x e quindi y non è valido\n\t\t\t\t\tprintln!(\"{}\", y);\n\t\t\t\n\n\t\t\tOtteniamo questo errore:\n\n\t\t\t\terror: `x` does not live long enough\n\t\t\t\t    y = &x;\n\t\t\t\t         ^\n\t\t\t\tnote: reference must be valid for the block suffix following statement 0 at\n\t\t\t\t2:16...\n\t\t\t\tlet y: &i32;\n\t\t\t\t{\n\t\t\t\t    let x = 5;\n\t\t\t\t    y = &x;\n\t\t\t\t}\n\n\t\t\t\tnote: ...but borrowed value is only valid for the block suffix following\n\t\t\t\tstatement 0 at 4:18\n\t\t\t\t    let x = 5;\n\t\t\t\t    y = &x;\n\t\t\t\t}\n\n\t\t\tIn altre parole, il valore di y è valido solamente per l'ambito dove x esiste. Non appena x se ne va, diventa invalido fare riferimento ad esso. Come tale, l'errore dice che il prestito ‘non vive abbastanza a lungo’ perché non è valido per la giusta quantità di tempo.\n\n\t\t\tSTESSO ERRORE Y VIVE PIU A LUNGO DI X PERCHE DICHIARATO PRIMA ES.\n\t\t\t\tIl medesimo problema avviene quando il riferimento è dichiarato prima della variabile a cui si riferisce. Questo è devuto al fatto che le risorse entro lo stesso ambito vengono rilasciate nell'ordine inverso di quello con cui sono state acquisite:\n\n\t\t\t\t\tlet y: &i32;  \t//Y creata prima di x \n\t\t\t\t\tlet x = 5;\t\t//x muore prima di y\n\t\t\t\t\ty = &x;         \n\n\t\t\t\t\tprintln!(\"{}\", y); //da errore su y perche x è cessata prima e \n\t\t\t\t\t\t\t\t\t\tquindi viene usata il legame di x quando è già stata rilasciata e non esiste piu mentre Y vive piu a lungo\n\n\t\t\t\tOtteniamo questo errore:\n\n\t\t\t\t\terror: `x` does not live long enough\n\t\t\t\t\ty = &x;\n\t\t\t\t\tErrore: 'X' non vive abbastanza a lungo\n\t\t\t\t\ty = &x;\n\n\n\t\t\t\tNell'esempio qui sopra, y è dichiarato prima di x, il che comporta che y vive (leggermente) più a lungo di x, il che non è consentito.\n\n\n\nTODO: @da@finire\t\t\tsi trova qui:\n\t\t\t\t\thttps://carlomilanesi.github.io/linguaggio-rust/getting-started.html\n\n TEMPO DI VITA\t\t\t\t\t\t\t\t\t\t\t4.10.\n \tNote\n \t\t\tQuesta è l'ultima delle tre sezioni che presentano il sistema di possesso di Rust. Qui si assume che siano già state lette le altre due:\n\n\t\t\t\tIl possesso, il concetto chiave\n\t\t\t\tI prestiti, e le loro caratteristiche associate, i ‘riferimenti’\n\n \tI tempi di vita\t\t\t\t\t\t\t\t\t\t4.10.1\n \t\t@lifetime_(@tempo@di@vita il sistema di possesso di Rust che imposta il\n \t\t\t\t\tmomento in cui deve essere rilasciata la risorsa)\n\n\n \t\tPrestare un riferimento a una risorsa posseduta da qualcun altro può essere complicato. Per esempio, immaginiamo questa sequenza di operazioni:\n\n \t\t\t1 Acquisisco un riferimento a una risorsa di qualche tipo.\n\t\t\t2 Ti presto un riferimento a tale risorsa.\n\t\t\t3 Decido di aver finito di lavorare con quella risorsa, e quindi la\n\t\t\t  rilascio, mentre tu hai ancora il tuo riferimento a tale risorsa.\n\t\t\t4 Tu decidi di usare quella risorsa.\n\n\t\t\t\t\t@puntatore@penzolante_(un riferimento ad un risorsa non valida)\n\t\tAhi, ahi! Il tuo riferimento sta puntando a una risorsa non più valida. Questo difetto si chiama ‘puntatore penzolante‘ o ‘utilizzo dopo il rilascio’.\n\n\t\t\t\t\t@life@time_(tempo di vita del riferimento fino al rilascio della risorsa.)\n\t\tPer correggerlo, dobbiamo assicurarci che il passo 4 non avvenga mai dopo il passo 3. Il sistema di possesso in Rust lo fa tramite un concetto chiamato \"tempo di vita\" [\"lifetime\"], che descrive l'ambito in cui un riferimento è valido. Nel nostro caso, o decidiamo che il tempo di vita vale solamente fino al passo 3, e in tal caso il passo 4 darà errore di compilazione, o decidiamo che il tempo di vita vale fino al passo 4, e in tal caso la risorsa dovrà essere rilasciata al passo 5.\n\n\t\tRIFERIMENTI IMPLICITI O ESPLICITI\n\t\tQuando abbiamo una funzione che prende un argomento per riferimento, possiamo essere impliciti o espliciti riguardo al tempo di vita di tale riferimento:\n\t\t\t\n\t\t\t// implicito\n\t\t\t\tfn foo(x: &i32) {\n\t\t\t\t}\n\n\t\t\t\t// esplicito : bar ha un solo tempo di vita <'a>\n\t\t\t\tfn bar<'a>(x: &'a i32) {  //\n\t\t\t\t}\n\t\tL''a si legge ‘il tempo di vita a’.\n\t\tTecnicamente, ogni riferimento ha qualche tempo di vita associato ad esso, ma il compilatore consente di eliderlo (cioè ometterlo, si veda la sezione [\"@Elisione del tempo di vita\"] [elisione del tempo di vita] più avanti) nei casi più tipici.\n\t\terò, prima di arrivarci, scomponiamo l'esempio esplicito:\n\n\t\t\tfn bar<'a>(...) = angolari  <> dopo il nome della funzione per dichiarare i tempi di \n\t\t\t\t\t\t\t\t\t\t   vita personali\n\n\n\t\tPrecedentemente abbiamo parlato un po' della sintassi delle funzioni, ma non abbiamo discusso dei <> dopo il nome della funzione. Una funzione può avere dei ‘parametri generici’ fra le <>, dei quali i tempi di vita sono un tipo. Discuteremo altri tipi di generici più avanti nel libro, ma per adesso, focalizziamoci sull'aspetto dei tempi di vita.\n\n\t\tUsiamo le <> per dichiarare i nostri tempi di vita. Questo dice che bar ha un solo tempo di vita, 'a. Se avessimo dei parametri riferimento, si presenterebbe così:\n\n\t\t\tfn bar<'a, 'b>(...)\n\n\t\tPoi nel nostro elenco di argomenti, usiamo i tempi di vita che abbiamo nominato:\n\n\t\t\t...(x: &'a i32)  \n\n\t\tSe avessimo voluto un riferimento &mut, avremmo scritto:\n\n\t\t\t...(x: &'a mut i32)  //riferimento mutabile i  32 con tempo di vita di a\n\n\t\tConfrontando &mut i32 con &'a mut i32, si nota che \n\t\t\tl'unica differenza è che il tempo di vita 'a si è intrufolato fra il & il mut i32. \n\n\t\tLa clausola &mut i32 va letta come \n\t\t\t‘un riferimento mutabile a un i32’, mentre \n\t\t\tla clausola &'a mut i32 va letta come ‘un riferimento mutabile a un i32 con tempo di vita 'a’.\n\n\n\n\n\n\n\n\n \tNelle struct\t\t\t\t\t\t\t\t\t\t4.10.2 \t\n \tI blocchi impl\t\t\t\t\t\t\t\t\t\t4.10.3 \t\n \tTempi di vita multipli\t\t\t\t\t\t\t\t4.10.4\t\n \tPensare agli ambiti\t\t\t\t\t\t\t\t\t4.10.5\n \tstatic\t\t\t\t\t\t\t\t\t\t\t\t4.10.5\n \tElisione del tempo di vita\t\t\t\t\t\t\t4.10.6\n \tEsempi\t\t\t\t\t\t\t\t\t\t\t\t4.10.7\n \tEsempi\t\t\t\t\t\t\t\t\t\t\t\t4.10.7\n\n IMMUTABILITA\t\t\t\t\t\t\t\t\t\t\t4.11.\t\n \tXXBorrowing (@PRESTITO)\t\t\t\t\t\t4.11.1 \t\n STRUTTURE \t\t\t\t\t\t\t\t\t\t\t\t4.12.\t\n \tXXBorrowing (@PRESTITO)\t\t\t\t\t\t4.12.1 \t\n ENUMERAZIONI\t\t\t\t\t\t\t\t\t\t\t4.13.\t\n \tXXBorrowing (@PRESTITO)\t\t\t\t\t\t4.13.1 \t\n MATCH\t\t\t\t\t\t\t\t\t\t\t\t\t4.14.\t\n PATTERN\t\t\t\t\t\t\t\t\t\t\t\t4.15.\t\n SINTASSI DEI METODI\t\t\t\t\t\t\t\t\t4.16.\t\n STRINGHE\t\t\t\t\t\t\t\t\t\t\t\t4.17.\t\n GENERICITÀ\t\t\t\t\t\t\t\t\t\t\t\t4.18.\t\n TRATTI\t\t\t\t\t\t\t\t\t\t\t\t\t4.19.\t\n DROP\t\t\t\t\t\t\t\t\t\t\t\t\t4.20.\t\n IF LET \t\t\t\t\t\t\t\t\t\t\t\t4.21.\t\n OGGETTI-TRATTI\t\t\t\t\t\t\t\t\t\t\t4.22.\t\n CHIUSURE\t\t\t\t\t\t\t\t\t\t\t\t4.23.\t\n SINTASSI UNIVERSALE DI CHIAMATA DI FUNZIONE\t\t\t4.24.\t\n CRATE E MODULI\t\t\t\t\t\t\t\t\t\t\t4.25.\t\n CONST E STATIC\t\t\t\t\t\t\t\t\t\t\t4.26.\t\n ATTRIBUTI\t\t\t\t\t\t\t\t\t\t\t\t4.27.\t\n ALIAS TRAMITE `TYPE`\t\t\t\t\t\t\t\t\t4.28.\t\n FORZATURA DI TIPO\t\t\t\t\t\t\t\t\t\t4.29.\t\n TIPI ASSOCIATI\t\t\t\t\t\t\t\t\t\t\t4.30.\t\n TIPI NON DIMENSIONATI\t\t\t\t\t\t\t\t\t4.31.\t\n OPERATORI E SOVRACCARICAMENTO\t\t\t\t\t\t\t4.32.\t\n COERCIZIONE DEREF\t\t\t\t\t\t\t\t\t\t4.33.\t\n LE MACRO\t\t\t\t\t\t\t\t\t\t\t\t4.34.\t\n PUNTATORI GREZZI\t\t\t\t\t\t\t\t\t\t4.35.\t\n `UNSAFE`\t\t\t\t\t\t\t\t\t\t\t\t4.36.\t\n RUST EFFICACE\t\t\t\t\t\t\t\t\t\t\t5.0  \t\n LO STACK E LO HEAP\t\t\t\t\t\t\t\t\t\t5.1.\t\n COLLAUDO\t\t\t\t\t\t\t\t\t\t\t\t5.2.\t\n COMPILAZIONE CONDIZIONALE\t\t\t\t\t\t\t\t5.3.\t\n DOCUMENTAZIONE\t\t\t\t\t\t\t\t\t\t\t5.4.\t\n ITERATORI\t\t\t\t\t\t\t\t\t\t\t\t5.5.\t\n CONCORRENZA\t\t\t\t\t\t\t\t\t\t\t5.6.\t\n GESTIONE DEGLI ERRORI\t\t\t\t\t\t\t\t\t5.7.\t\n SCEGLIERE LE GARANZIE\t\t\t\t\t\t\t\t\t5.8.\t\n FFI\t\t\t\t\t\t\t\t\t\t\t\t\t5.9.\t\n PRESTITO E ASREF\t\t\t\t\t\t\t\t\t\t5.10.\t\n CANALI DI RILASCIO\t\t\t\t\t\t\t\t\t\t5.11.\t\n USARE RUST SENZA LA LIBRERIA STANDARD\t\t\t\t\t5.12.\t\n RUST NOTTURNO\t\t\t\t\t\t\t\t\t\t\t6.0.0\t\n PLUGIN DEL COMPILATORE\t\t\t\t\t\t\t\t\t6.1.\t\n ASSEMBLY IN-LINE\t\t\t\t\t\t\t\t\t\t6.2.\t\n OMETTERE LA LIBRERIA STDANDARD\t\t\t\t\t\t\t6.3.\t\n INTRINSECI\t\t\t\t\t\t\t\t\t\t\t\t6.4.\t\n ELEMENTI \"LANG\"\t\t\t\t\t\t\t\t\t\t6.5.\t\n LINK AVANZATO\t\t\t\t\t\t\t\t\t\t\t6.6.\t\n COLLAUDI PRESTAZIONALI\t\t\t\t\t\t\t\t\t6.7.\t\n SINTASSI DI BOX E RELATIVI PATTERN\t\t\t\t\t\t6.8.\t\n PATTERN DI SLICE\t\t\t\t\t\t\t\t\t\t6.9.\t\n COSTANTI ASSOCIATE\t\t\t\t\t\t\t\t\t\t6.10. \t\n ALLOCATORI PERSONALIZZATI\t\t\t\t\t\t\t\t6.11. \t\n GLOSSARIO\t\t\t\t\t\t\t\t\t\t\t\t7.00\t\n INDICE ANALITICO DELLA SINTASSI\t\t\t\t\t\t8.00   \t\n\n\nINDICE_COMANDI_CARGO+RUST\n\n\tC\n\t\tCONVENZIONE IN RUST\n\t\t\t\t\tVedi: https://www.freecodecamp.org/italian/news/impara-a-programmare-con-rust-corso-interattivo-in-linguaggio-rust-su-replit/#le-basi-di-rust\n\t\t\t\t\t\n\t\t\t\tNOMENCLATURA\n\t\t\t\t\tIn Rust, le convenzioni di nomenclatura sono le seguenti:\n\n\t\t\t\t\tOGGETTO\t\tSTILE\n\t\t\t\t\tVariabili\tsnake_case\n\t\t\t\t\tFunzioni\tsnake_case\n\t\t\t\t\tFile\t\tsnake_case\n\t\t\t\t\tCostanti\tSCREAMING_SNAKE_CASE\n\t\t\t\t\tStatic\t    SCREAMING_SNAKE_CASE\n\t\t\t\t\tTipi\t    PascalCase\n\t\t\t\t\tTratti\t    PascalCase\n\t\t\t\t\tEnum\t    PascalCase\n\n\t\t\t\tCONVENZIONE PER LE VARIABILI\n\t\t\t\t\til trattino basso _ indica che la variabile non è utilizzata:\n\t\t\t\t\t\tfn main() {\n\t\t\t\t\t\t\t\t  let _unused_variable = my_func(10);\n\t\t\t\t\t\t\t\t}\n\t\t\t\tPARAMETRI CON SINTASSI :\n\t\t\t\t\tI parametri di funzione vengono scritti usando la sintassi :\n\n\n\t\t\t\t\t\tfn my_func(x: u8) -> i32 {\n\t\t\t\t\t\t  x as i32\n\t\t\t\t\t\t}\n\n\t\t\t\tSTRINGHE E SLICE IN RUST\n\t\t\t\t\tUn motivo di confusione comune per i principianti di Rust è la differenza tra la struct String e il tipo str.\n\n\t\t\t\t\t\t//&str = memorizzata nello stack quindi fissa - riferimento c++ \n\t\t\t\t\t\tlet my_str: &str = \"Hello, world!\";\n\t\t\t\t\t\t//my_string = memorizzata nell'heap con grandezza sconosciuta al mento della compilazione\n\n\t\t\t\t\t\tlet my_string: String = String::from(\"Hello, world!\");\n\n\n\t\t\t\t\tNell'esempio qui sopra, my_str è un riferimento a una stringa letterale, e my_string è un'istanza della struct String.\n\n\t\t\t\t\tUn'importante distinzione tra le due è che my_str è memorizzata nello stack, mentre my_string è allocata nella memoria heap. Ciò significa che il valore di my_str non può cambiare e la sua dimensione è fissa, mentre my_string può avere una dimensione sconosciuta al tempo di compilazione.\n\n\t\t\t\t\tUna stringa letterale è anche conosciuta come string slice (letteralmente \"fetta\"), poiché &str fa riferimento a parte di una stringa. In linea generale, ecco la somiglianza tra stringhe e array:\n\n\n\tI\n\t\textern\n\t\t\tserve a comunicare a rust di utilizzare una dipendenza indicata nel .toml. CHE\n\t\t\tPROVVEDERA a scaricarla es. 0.3.0 SE NON esiste, e alla prima creazione del progetto\n\t\t\timposta anche il Cargo.lock a questa dipendenza in modo che se usciranno ulteriori versioni\n\t\t\tes. 0.3.1 instabili non saranno scaricate a meno che non si imposti manualmente nel toml.\n\t\t\tAttenzione se esce altre due versione es. 0.3.9 e la 0.4.0 POSSIAMO USARE IL COMANDO\n\t\t\t\tcargo update\n\t\t\tche permette di aggiornare la versione solo tra > 0.3.0 and <= 0.3.9 quindi tutte le successive a quella imposta ma non la quattro che dovrà essere specificata nelle dipendenze\n\t\t\tdel Cargo.toml.\n\t\t\tIl Cargo.lock fa una difesa del progetto in quanto utilizza sempre quella valida e senza errori.\n\n\t\t\t\tesempio\n\t\t\t\t\t.toml\n\t\t\t\t\t\t# Iimposto nel cargo.toml  la dipendenza della libreria rand\n\t\t\t\t\t\t[dependencies]\n\t\t\t\t\t\trand=\"0.3.0\"\n\n\t\t\t\t\t.rs\n\t\t\t\t\t\t//nel file main.rs COMUNICO a rust l'utilizzo della libreria rand con:\n\n\t\t\t\t\t\textern crate rand;\n",
			"file": "RUST_TUTORIAL_CARLO_MILANESI.MD",
			"file_size": 74624,
			"file_write_time": 133397109669563873,
			"settings":
			{
				"buffer_size": 74914,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					108,
					1,
					"insert",
					{
						"characters": " r"
					},
					"AgAAAE4EAQAAAAAATwQBAAAAAAAAAAAATwQBAAAAAABQBAEAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgQBAAAAAABOBAEAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					2,
					"left_delete",
					null,
					"AgAAAE8EAQAAAAAATwQBAAAAAAABAAAAck4EAQAAAAAATgQBAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUAQBAAAAAABQBAEAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAE4EAQAAAAAATwQBAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgQBAAAAAABOBAEAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": " rilasci"
					},
					"CAAAAE8EAQAAAAAAUAQBAAAAAAAAAAAAUAQBAAAAAABRBAEAAAAAAAAAAABRBAEAAAAAAFIEAQAAAAAAAAAAAFIEAQAAAAAAUwQBAAAAAAAAAAAAUwQBAAAAAABUBAEAAAAAAAAAAABUBAEAAAAAAFUEAQAAAAAAAAAAAFUEAQAAAAAAVgQBAAAAAAAAAAAAVgQBAAAAAABXBAEAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwQBAAAAAABPBAEAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "ata"
					},
					"AwAAAFcEAQAAAAAAWAQBAAAAAAAAAAAAWAQBAAAAAABZBAEAAAAAAAAAAABZBAEAAAAAAFoEAQAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwQBAAAAAABXBAEAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " la"
					},
					"AwAAAFoEAQAAAAAAWwQBAAAAAAAAAAAAWwQBAAAAAABcBAEAAAAAAAAAAABcBAEAAAAAAF0EAQAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWgQBAAAAAABaBAEAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " risorsa"
					},
					"CAAAAF0EAQAAAAAAXgQBAAAAAAAAAAAAXgQBAAAAAABfBAEAAAAAAAAAAABfBAEAAAAAAGAEAQAAAAAAAAAAAGAEAQAAAAAAYQQBAAAAAAAAAAAAYQQBAAAAAABiBAEAAAAAAAAAAABiBAEAAAAAAGMEAQAAAAAAAAAAAGMEAQAAAAAAZAQBAAAAAAAAAAAAZAQBAAAAAABlBAEAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXQQBAAAAAABdBAEAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGYEAQAAAAAAZwQBAAAAAAAAAAAAZwQBAAAAAABtBAEAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZgQBAAAAAABmBAEAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAACUGAQAAAAAAJgYBAAAAAAAAAAAAJgYBAAAAAAApBgEAAAAAAAAAAABnBAEAAAAAAGcEAQAAAAAABgAAACAJCQkJCQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQYBAAAAAAAlBgEAAAAAAP///////+9/"
				],
				[
					120,
					1,
					"right_delete",
					null,
					"AQAAACMGAQAAAAAAIwYBAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwYBAAAAAAAjBgEAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "\n\nI"
					},
					"BwAAAKgIAQAAAAAAqQgBAAAAAAAAAAAAqQgBAAAAAACrCAEAAAAAAAAAAAAgBgEAAAAAACAGAQAAAAAAAwAAAAkJCagIAQAAAAAAqQgBAAAAAAAAAAAAqQgBAAAAAACrCAEAAAAAAAAAAACmCAEAAAAAAKYIAQAAAAAAAgAAAAkJqQgBAAAAAACqCAEAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqAgBAAAAAACoCAEAAAAAAP///////+9/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "MPI"
					},
					"AwAAAKoIAQAAAAAAqwgBAAAAAAAAAAAAqwgBAAAAAACsCAEAAAAAAAAAAACsCAEAAAAAAK0IAQAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqggBAAAAAACqCAEAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAAKwIAQAAAAAArAgBAAAAAAABAAAASQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArQgBAAAAAACtCAEAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "LICITI"
					},
					"BgAAAKwIAQAAAAAArQgBAAAAAAAAAAAArQgBAAAAAACuCAEAAAAAAAAAAACuCAEAAAAAAK8IAQAAAAAAAAAAAK8IAQAAAAAAsAgBAAAAAAAAAAAAsAgBAAAAAACxCAEAAAAAAAAAAACxCAEAAAAAALIIAQAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArAgBAAAAAACsCAEAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": " O"
					},
					"AgAAALIIAQAAAAAAswgBAAAAAAAAAAAAswgBAAAAAAC0CAEAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsggBAAAAAACyCAEAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " ESPLICITI"
					},
					"CgAAALQIAQAAAAAAtQgBAAAAAAAAAAAAtQgBAAAAAAC2CAEAAAAAAAAAAAC2CAEAAAAAALcIAQAAAAAAAAAAALcIAQAAAAAAuAgBAAAAAAAAAAAAuAgBAAAAAAC5CAEAAAAAAAAAAAC5CAEAAAAAALoIAQAAAAAAAAAAALoIAQAAAAAAuwgBAAAAAAAAAAAAuwgBAAAAAAC8CAEAAAAAAAAAAAC8CAEAAAAAAL0IAQAAAAAAAAAAAL0IAQAAAAAAvggBAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtAgBAAAAAAC0CAEAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL4IAQAAAAAAvwgBAAAAAAAAAAAAvwgBAAAAAADBCAEAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvggBAAAAAAC+CAEAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"",
					null,
					"AQAAAMEIAQAAAAAAWgkBAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQgBAAAAAADBCAEAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAFoJAQAAAAAAWwkBAAAAAAAAAAAAWwkBAAAAAABdCQEAAAAAAAAAAABdCQEAAAAAAF4JAQAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWgkBAAAAAABaCQEAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"",
					null,
					"AQAAAF4JAQAAAAAApwkBAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXgkBAAAAAABeCQEAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					4,
					"indent",
					null,
					"FAAAAGsJAQAAAAAAbAkBAAAAAAAAAAAAfgkBAAAAAAB/CQEAAAAAAAAAAACCCQEAAAAAAIMJAQAAAAAAAAAAAJAJAQAAAAAAkQkBAAAAAAAAAAAAqgkBAAAAAACrCQEAAAAAAAAAAABrCQEAAAAAAGwJAQAAAAAAAAAAAH8JAQAAAAAAgAkBAAAAAAAAAAAAhAkBAAAAAACFCQEAAAAAAAAAAACTCQEAAAAAAJQJAQAAAAAAAAAAAK4JAQAAAAAArwkBAAAAAAAAAAAAawkBAAAAAABsCQEAAAAAAAAAAACACQEAAAAAAIEJAQAAAAAAAAAAAIYJAQAAAAAAhwkBAAAAAAAAAAAAlgkBAAAAAACXCQEAAAAAAAAAAACyCQEAAAAAALMJAQAAAAAAAAAAAGsJAQAAAAAAbAkBAAAAAAAAAAAAgQkBAAAAAACCCQEAAAAAAAAAAACICQEAAAAAAIkJAQAAAAAAAAAAAJkJAQAAAAAAmgkBAAAAAAAAAAAAtgkBAAAAAAC3CQEAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwkBAAAAAABrCQEAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "ri"
					},
					"AgAAAKkIAQAAAAAAqggBAAAAAAAAAAAAqggBAAAAAACrCAEAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqQgBAAAAAACpCAEAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					2,
					"left_delete",
					null,
					"AgAAAKoIAQAAAAAAqggBAAAAAAABAAAAaakIAQAAAAAAqQgBAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqwgBAAAAAACrCAEAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "RIFERIMENTI"
					},
					"CwAAAKkIAQAAAAAAqggBAAAAAAAAAAAAqggBAAAAAACrCAEAAAAAAAAAAACrCAEAAAAAAKwIAQAAAAAAAAAAAKwIAQAAAAAArQgBAAAAAAAAAAAArQgBAAAAAACuCAEAAAAAAAAAAACuCAEAAAAAAK8IAQAAAAAAAAAAAK8IAQAAAAAAsAgBAAAAAAAAAAAAsAgBAAAAAACxCAEAAAAAAAAAAACxCAEAAAAAALIIAQAAAAAAAAAAALIIAQAAAAAAswgBAAAAAAAAAAAAswgBAAAAAAC0CAEAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqQgBAAAAAACpCAEAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALQIAQAAAAAAtQgBAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtAgBAAAAAAC0CAEAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAagUBAAAAAACxBQEAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"reindent",
					null,
					"AQAAACEGAQAAAAAAJAYBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQYBAAAAAAAhBgEAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\t\t@"
					},
					"AwAAACQGAQAAAAAAJQYBAAAAAAAAAAAAJQYBAAAAAAAmBgEAAAAAAAAAAAAmBgEAAAAAACcGAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAYBAAAAAAAkBgEAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "puntatore"
					},
					"CQAAACcGAQAAAAAAKAYBAAAAAAAAAAAAKAYBAAAAAAApBgEAAAAAAAAAAAApBgEAAAAAACoGAQAAAAAAAAAAACoGAQAAAAAAKwYBAAAAAAAAAAAAKwYBAAAAAAAsBgEAAAAAAAAAAAAsBgEAAAAAAC0GAQAAAAAAAAAAAC0GAQAAAAAALgYBAAAAAAAAAAAALgYBAAAAAAAvBgEAAAAAAAAAAAAvBgEAAAAAADAGAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwYBAAAAAAAnBgEAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "@penzolante"
					},
					"CwAAADAGAQAAAAAAMQYBAAAAAAAAAAAAMQYBAAAAAAAyBgEAAAAAAAAAAAAyBgEAAAAAADMGAQAAAAAAAAAAADMGAQAAAAAANAYBAAAAAAAAAAAANAYBAAAAAAA1BgEAAAAAAAAAAAA1BgEAAAAAADYGAQAAAAAAAAAAADYGAQAAAAAANwYBAAAAAAAAAAAANwYBAAAAAAA4BgEAAAAAAAAAAAA4BgEAAAAAADkGAQAAAAAAAAAAADkGAQAAAAAAOgYBAAAAAAAAAAAAOgYBAAAAAAA7BgEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAYBAAAAAAAwBgEAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAADsGAQAAAAAAPAYBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwYBAAAAAAA7BgEAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADwGAQAAAAAAPgYBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAYBAAAAAAA8BgEAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "un"
					},
					"AgAAAD0GAQAAAAAAPgYBAAAAAAAAAAAAPgYBAAAAAAA/BgEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQYBAAAAAAA9BgEAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " riferim"
					},
					"CAAAAD8GAQAAAAAAQAYBAAAAAAAAAAAAQAYBAAAAAABBBgEAAAAAAAAAAABBBgEAAAAAAEIGAQAAAAAAAAAAAEIGAQAAAAAAQwYBAAAAAAAAAAAAQwYBAAAAAABEBgEAAAAAAAAAAABEBgEAAAAAAEUGAQAAAAAAAAAAAEUGAQAAAAAARgYBAAAAAAAAAAAARgYBAAAAAABHBgEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwYBAAAAAAA/BgEAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "ento"
					},
					"BAAAAEcGAQAAAAAASAYBAAAAAAAAAAAASAYBAAAAAABJBgEAAAAAAAAAAABJBgEAAAAAAEoGAQAAAAAAAAAAAEoGAQAAAAAASwYBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwYBAAAAAABHBgEAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " ad"
					},
					"AwAAAEsGAQAAAAAATAYBAAAAAAAAAAAATAYBAAAAAABNBgEAAAAAAAAAAABNBgEAAAAAAE4GAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwYBAAAAAABLBgEAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " un"
					},
					"AwAAAE4GAQAAAAAATwYBAAAAAAAAAAAATwYBAAAAAABQBgEAAAAAAAAAAABQBgEAAAAAAFEGAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgYBAAAAAABOBgEAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " risorsanon"
					},
					"CwAAAFEGAQAAAAAAUgYBAAAAAAAAAAAAUgYBAAAAAABTBgEAAAAAAAAAAABTBgEAAAAAAFQGAQAAAAAAAAAAAFQGAQAAAAAAVQYBAAAAAAAAAAAAVQYBAAAAAABWBgEAAAAAAAAAAABWBgEAAAAAAFcGAQAAAAAAAAAAAFcGAQAAAAAAWAYBAAAAAAAAAAAAWAYBAAAAAABZBgEAAAAAAAAAAABZBgEAAAAAAFoGAQAAAAAAAAAAAFoGAQAAAAAAWwYBAAAAAAAAAAAAWwYBAAAAAABcBgEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQYBAAAAAABRBgEAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					3,
					"left_delete",
					null,
					"AwAAAFsGAQAAAAAAWwYBAAAAAAABAAAAbloGAQAAAAAAWgYBAAAAAAABAAAAb1kGAQAAAAAAWQYBAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAXAYBAAAAAABcBgEAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " non"
					},
					"BAAAAFkGAQAAAAAAWgYBAAAAAAAAAAAAWgYBAAAAAABbBgEAAAAAAAAAAABbBgEAAAAAAFwGAQAAAAAAAAAAAFwGAQAAAAAAXQYBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQYBAAAAAABZBgEAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " valida"
					},
					"BwAAAF0GAQAAAAAAXgYBAAAAAAAAAAAAXgYBAAAAAABfBgEAAAAAAAAAAABfBgEAAAAAAGAGAQAAAAAAAAAAAGAGAQAAAAAAYQYBAAAAAAAAAAAAYQYBAAAAAABiBgEAAAAAAAAAAABiBgEAAAAAAGMGAQAAAAAAAAAAAGMGAQAAAAAAZAYBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQYBAAAAAABdBgEAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"reindent",
					null,
					"AQAAAP8GAQAAAAAAAQcBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wYBAAAAAAD/BgEAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAAAEHAQAAAAAAAgcBAAAAAAAAAAAAAgcBAAAAAAADBwEAAAAAAAAAAAADBwEAAAAAAAQHAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQcBAAAAAAABBwEAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "\n@l"
					},
					"BQAAAAQHAQAAAAAABQcBAAAAAAAAAAAABQcBAAAAAAAKBwEAAAAAAAAAAAD/BgEAAAAAAP8GAQAAAAAABQAAAAkJCQkJBQcBAAAAAAAGBwEAAAAAAAAAAAAGBwEAAAAAAAcHAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAcBAAAAAAAEBwEAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "ife"
					},
					"AwAAAAcHAQAAAAAACAcBAAAAAAAAAAAACAcBAAAAAAAJBwEAAAAAAAAAAAAJBwEAAAAAAAoHAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwcBAAAAAAAHBwEAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "@time_"
					},
					"BgAAAAoHAQAAAAAACwcBAAAAAAAAAAAACwcBAAAAAAAMBwEAAAAAAAAAAAAMBwEAAAAAAA0HAQAAAAAAAAAAAA0HAQAAAAAADgcBAAAAAAAAAAAADgcBAAAAAAAPBwEAAAAAAAAAAAAPBwEAAAAAABAHAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgcBAAAAAAAKBwEAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABAHAQAAAAAAEgcBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAcBAAAAAAAQBwEAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "tempo"
					},
					"BQAAABEHAQAAAAAAEgcBAAAAAAAAAAAAEgcBAAAAAAATBwEAAAAAAAAAAAATBwEAAAAAABQHAQAAAAAAAAAAABQHAQAAAAAAFQcBAAAAAAAAAAAAFQcBAAAAAAAWBwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQcBAAAAAAARBwEAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAABYHAQAAAAAAFwcBAAAAAAAAAAAAFwcBAAAAAAAYBwEAAAAAAAAAAAAYBwEAAAAAABkHAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgcBAAAAAAAWBwEAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABkHAQAAAAAAGgcBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQcBAAAAAAAZBwEAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "vita"
					},
					"BAAAABoHAQAAAAAAGwcBAAAAAAAAAAAAGwcBAAAAAAAcBwEAAAAAAAAAAAAcBwEAAAAAAB0HAQAAAAAAAAAAAB0HAQAAAAAAHgcBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgcBAAAAAAAaBwEAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB4HAQAAAAAAHwcBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgcBAAAAAAAeBwEAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "del"
					},
					"AwAAAB8HAQAAAAAAIAcBAAAAAAAAAAAAIAcBAAAAAAAhBwEAAAAAAAAAAAAhBwEAAAAAACIHAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwcBAAAAAAAfBwEAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " procedime"
					},
					"CgAAACIHAQAAAAAAIwcBAAAAAAAAAAAAIwcBAAAAAAAkBwEAAAAAAAAAAAAkBwEAAAAAACUHAQAAAAAAAAAAACUHAQAAAAAAJgcBAAAAAAAAAAAAJgcBAAAAAAAnBwEAAAAAAAAAAAAnBwEAAAAAACgHAQAAAAAAAAAAACgHAQAAAAAAKQcBAAAAAAAAAAAAKQcBAAAAAAAqBwEAAAAAAAAAAAAqBwEAAAAAACsHAQAAAAAAAAAAACsHAQAAAAAALAcBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgcBAAAAAAAiBwEAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "nto"
					},
					"AwAAACwHAQAAAAAALQcBAAAAAAAAAAAALQcBAAAAAAAuBwEAAAAAAAAAAAAuBwEAAAAAAC8HAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAcBAAAAAAAsBwEAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " fina"
					},
					"BQAAAC8HAQAAAAAAMAcBAAAAAAAAAAAAMAcBAAAAAAAxBwEAAAAAAAAAAAAxBwEAAAAAADIHAQAAAAAAAAAAADIHAQAAAAAAMwcBAAAAAAAAAAAAMwcBAAAAAAA0BwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwcBAAAAAAAvBwEAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAADMHAQAAAAAAMwcBAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAANAcBAAAAAAA0BwEAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAADMHAQAAAAAANAcBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwcBAAAAAAAzBwEAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " al"
					},
					"AwAAADQHAQAAAAAANQcBAAAAAAAAAAAANQcBAAAAAAA2BwEAAAAAAAAAAAA2BwEAAAAAADcHAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAcBAAAAAAA0BwEAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " rilascio"
					},
					"CQAAADcHAQAAAAAAOAcBAAAAAAAAAAAAOAcBAAAAAAA5BwEAAAAAAAAAAAA5BwEAAAAAADoHAQAAAAAAAAAAADoHAQAAAAAAOwcBAAAAAAAAAAAAOwcBAAAAAAA8BwEAAAAAAAAAAAA8BwEAAAAAAD0HAQAAAAAAAAAAAD0HAQAAAAAAPgcBAAAAAAAAAAAAPgcBAAAAAAA/BwEAAAAAAAAAAAA/BwEAAAAAAEAHAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwcBAAAAAAA3BwEAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " della"
					},
					"BgAAAEAHAQAAAAAAQQcBAAAAAAAAAAAAQQcBAAAAAABCBwEAAAAAAAAAAABCBwEAAAAAAEMHAQAAAAAAAAAAAEMHAQAAAAAARAcBAAAAAAAAAAAARAcBAAAAAABFBwEAAAAAAAAAAABFBwEAAAAAAEYHAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAcBAAAAAABABwEAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " risorsa"
					},
					"CAAAAEYHAQAAAAAARwcBAAAAAAAAAAAARwcBAAAAAABIBwEAAAAAAAAAAABIBwEAAAAAAEkHAQAAAAAAAAAAAEkHAQAAAAAASgcBAAAAAAAAAAAASgcBAAAAAABLBwEAAAAAAAAAAABLBwEAAAAAAEwHAQAAAAAAAAAAAEwHAQAAAAAATQcBAAAAAAAAAAAATQcBAAAAAABOBwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgcBAAAAAABGBwEAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAE4HAQAAAAAATwcBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgcBAAAAAABOBwEAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "riferiment"
					},
					"CwAAACMHAQAAAAAAJAcBAAAAAAAAAAAAJAcBAAAAAAAkBwEAAAAAAAwAAABwcm9jZWRpbWVudG8kBwEAAAAAACUHAQAAAAAAAAAAACUHAQAAAAAAJgcBAAAAAAAAAAAAJgcBAAAAAAAnBwEAAAAAAAAAAAAnBwEAAAAAACgHAQAAAAAAAAAAACgHAQAAAAAAKQcBAAAAAAAAAAAAKQcBAAAAAAAqBwEAAAAAAAAAAAAqBwEAAAAAACsHAQAAAAAAAAAAACsHAQAAAAAALAcBAAAAAAAAAAAALAcBAAAAAAAtBwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwcBAAAAAAAvBwEAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAC0HAQAAAAAALgcBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQcBAAAAAAAtBwEAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP4JAQAAAAAA/wkBAAAAAAAAAAAA/wkBAAAAAAACCgEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gkBAAAAAAD+CQEAAAAAAAAAAAAAAFtA"
				],
				[
					57,
					1,
					"reindent",
					null,
					"AQAAAGAKAQAAAAAAZAoBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAoBAAAAAABgCgEAAAAAAAAAAAAAAFtA"
				],
				[
					58,
					2,
					"unindent",
					null,
					"AgAAAGAKAQAAAAAAYAoBAAAAAAABAAAACWAKAQAAAAAAYAoBAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAZAoBAAAAAABkCgEAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"",
					null,
					"AQAAAGIKAQAAAAAAhQoBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgoBAAAAAABiCgEAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIUKAQAAAAAAhgoBAAAAAAAAAAAAhgoBAAAAAACICgEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQoBAAAAAACFCgEAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"",
					null,
					"AQAAAIgKAQAAAAAAeQsBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAoBAAAAAACICgEAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAAIgKAQAAAAAAiQoBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAoBAAAAAACICgEAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "@"
					},
					"AQAAACALAQAAAAAAIQsBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAsBAAAAAAAgCwEAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHsLAQAAAAAAfAsBAAAAAAAAAAAAfAsBAAAAAAB+CwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewsBAAAAAAB7CwEAAAAAAAAAAAAAgIZA"
				],
				[
					76,
					1,
					"",
					null,
					"AQAAAH4LAQAAAAAAtwsBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgsBAAAAAAB+CwEAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAALcLAQAAAAAAuAsBAAAAAAAAAAAAuAsBAAAAAAC6CwEAAAAAAAAAAAC6CwEAAAAAALsLAQAAAAAAAAAAALsLAQAAAAAAvQsBAAAAAAAAAAAAuAsBAAAAAAC4CwEAAAAAAAIAAAAJCbsLAQAAAAAAvAsBAAAAAAAAAAAAvAsBAAAAAAC+CwEAAAAAAAAAAAC5CwEAAAAAALkLAQAAAAAAAgAAAAkJ",
					"AQAAAAAAAAABAAAAtwsBAAAAAAC3CwEAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"reindent",
					null,
					"AQAAALkLAQAAAAAAuwsBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQsBAAAAAAC5CwEAAAAAAAAAAAAAAFJA"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AgAAALsLAQAAAAAAvAsBAAAAAAAAAAAAvQsBAAAAAAC9CwEAAAAAAAIAAAAJCQ",
					"AQAAAAAAAAABAAAAuwsBAAAAAAC7CwEAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"",
					null,
					"AQAAALwLAQAAAAAAywsBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAsBAAAAAAC8CwEAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAMsLAQAAAAAAzAsBAAAAAAAAAAAAzAsBAAAAAADNCwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywsBAAAAAADLCwEAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAM0LAQAAAAAAzgsBAAAAAAAAAAAAzgsBAAAAAADPCwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQsBAAAAAADNCwEAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "ngolari"
					},
					"BwAAAM8LAQAAAAAA0AsBAAAAAAAAAAAA0AsBAAAAAADRCwEAAAAAAAAAAADRCwEAAAAAANILAQAAAAAAAAAAANILAQAAAAAA0wsBAAAAAAAAAAAA0wsBAAAAAADUCwEAAAAAAAAAAADUCwEAAAAAANULAQAAAAAAAAAAANULAQAAAAAA1gsBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwsBAAAAAADPCwEAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANYLAQAAAAAA1wsBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gsBAAAAAADWCwEAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"",
					null,
					"AQAAANcLAQAAAAAA2gsBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1wsBAAAAAADXCwEAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " dopo"
					},
					"BQAAANoLAQAAAAAA2wsBAAAAAAAAAAAA2wsBAAAAAADcCwEAAAAAAAAAAADcCwEAAAAAAN0LAQAAAAAAAAAAAN0LAQAAAAAA3gsBAAAAAAAAAAAA3gsBAAAAAADfCwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gsBAAAAAADaCwEAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " il"
					},
					"AwAAAN8LAQAAAAAA4AsBAAAAAAAAAAAA4AsBAAAAAADhCwEAAAAAAAAAAADhCwEAAAAAAOILAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wsBAAAAAADfCwEAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " nome"
					},
					"BQAAAOILAQAAAAAA4wsBAAAAAAAAAAAA4wsBAAAAAADkCwEAAAAAAAAAAADkCwEAAAAAAOULAQAAAAAAAAAAAOULAQAAAAAA5gsBAAAAAAAAAAAA5gsBAAAAAADnCwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gsBAAAAAADiCwEAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " della"
					},
					"BgAAAOcLAQAAAAAA6AsBAAAAAAAAAAAA6AsBAAAAAADpCwEAAAAAAAAAAADpCwEAAAAAAOoLAQAAAAAAAAAAAOoLAQAAAAAA6wsBAAAAAAAAAAAA6wsBAAAAAADsCwEAAAAAAAAAAADsCwEAAAAAAO0LAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wsBAAAAAADnCwEAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " funzione"
					},
					"CQAAAO0LAQAAAAAA7gsBAAAAAAAAAAAA7gsBAAAAAADvCwEAAAAAAAAAAADvCwEAAAAAAPALAQAAAAAAAAAAAPALAQAAAAAA8QsBAAAAAAAAAAAA8QsBAAAAAADyCwEAAAAAAAAAAADyCwEAAAAAAPMLAQAAAAAAAAAAAPMLAQAAAAAA9AsBAAAAAAAAAAAA9AsBAAAAAAD1CwEAAAAAAAAAAAD1CwEAAAAAAPYLAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QsBAAAAAADtCwEAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAPYLAQAAAAAA9wsBAAAAAAAAAAAA9wsBAAAAAAD6CwEAAAAAAAAAAAD6CwEAAAAAAPsLAQAAAAAAAAAAAPsLAQAAAAAA/gsBAAAAAAAAAAAA9wsBAAAAAAD3CwEAAAAAAAMAAAAJCQn7CwEAAAAAAPwLAQAAAAAAAAAAAPwLAQAAAAAA/wsBAAAAAAAAAAAA+AsBAAAAAAD4CwEAAAAAAAMAAAAJCQk",
					"AQAAAAAAAAABAAAA9gsBAAAAAAD2CwEAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"unindent",
					null,
					"AQAAAPkLAQAAAAAA+QsBAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAA/AsBAAAAAAD8CwEAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"",
					null,
					"AQAAAPsLAQAAAAAAWA0BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wsBAAAAAAD7CwEAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFgNAQAAAAAAWQ0BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWA0BAAAAAABYDQEAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " per"
					},
					"BAAAAPYLAQAAAAAA9wsBAAAAAAAAAAAA9wsBAAAAAAD4CwEAAAAAAAAAAAD4CwEAAAAAAPkLAQAAAAAAAAAAAPkLAQAAAAAA+gsBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gsBAAAAAAD2CwEAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": " dichiarare"
					},
					"CwAAAPoLAQAAAAAA+wsBAAAAAAAAAAAA+wsBAAAAAAD8CwEAAAAAAAAAAAD8CwEAAAAAAP0LAQAAAAAAAAAAAP0LAQAAAAAA/gsBAAAAAAAAAAAA/gsBAAAAAAD/CwEAAAAAAAAAAAD/CwEAAAAAAAAMAQAAAAAAAAAAAAAMAQAAAAAAAQwBAAAAAAAAAAAAAQwBAAAAAAACDAEAAAAAAAAAAAACDAEAAAAAAAMMAQAAAAAAAAAAAAMMAQAAAAAABAwBAAAAAAAAAAAABAwBAAAAAAAFDAEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gsBAAAAAAD6CwEAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAAUMAQAAAAAABgwBAAAAAAAAAAAABgwBAAAAAAAHDAEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQwBAAAAAAAFDAEAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": " tempi"
					},
					"BgAAAAcMAQAAAAAACAwBAAAAAAAAAAAACAwBAAAAAAAJDAEAAAAAAAAAAAAJDAEAAAAAAAoMAQAAAAAAAAAAAAoMAQAAAAAACwwBAAAAAAAAAAAACwwBAAAAAAAMDAEAAAAAAAAAAAAMDAEAAAAAAA0MAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwwBAAAAAAAHDAEAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAAA0MAQAAAAAADgwBAAAAAAAAAAAADgwBAAAAAAAPDAEAAAAAAAAAAAAPDAEAAAAAABAMAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQwBAAAAAAANDAEAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABAMAQAAAAAAEQwBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAwBAAAAAAAQDAEAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "\n\t\t\t\t\t\t\t\t"
					},
					"CgAAABEMAQAAAAAAEgwBAAAAAAAAAAAAEgwBAAAAAAAVDAEAAAAAAAAAAAAVDAEAAAAAABYMAQAAAAAAAAAAABYMAQAAAAAAFwwBAAAAAAAAAAAAFwwBAAAAAAAYDAEAAAAAAAAAAAAYDAEAAAAAABkMAQAAAAAAAAAAABkMAQAAAAAAGgwBAAAAAAAAAAAAGgwBAAAAAAAbDAEAAAAAAAAAAAAbDAEAAAAAABwMAQAAAAAAAAAAABwMAQAAAAAAHQwBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQwBAAAAAAARDAEAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"left_delete",
					null,
					"AQAAABwMAQAAAAAAHAwBAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAHQwBAAAAAAAdDAEAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "   vita"
					},
					"BwAAABwMAQAAAAAAHQwBAAAAAAAAAAAAHQwBAAAAAAAeDAEAAAAAAAAAAAAeDAEAAAAAAB8MAQAAAAAAAAAAAB8MAQAAAAAAIAwBAAAAAAAAAAAAIAwBAAAAAAAhDAEAAAAAAAAAAAAhDAEAAAAAACIMAQAAAAAAAAAAACIMAQAAAAAAIwwBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAwBAAAAAAAcDAEAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": " personali"
					},
					"CgAAACMMAQAAAAAAJAwBAAAAAAAAAAAAJAwBAAAAAAAlDAEAAAAAAAAAAAAlDAEAAAAAACYMAQAAAAAAAAAAACYMAQAAAAAAJwwBAAAAAAAAAAAAJwwBAAAAAAAoDAEAAAAAAAAAAAAoDAEAAAAAACkMAQAAAAAAAAAAACkMAQAAAAAAKgwBAAAAAAAAAAAAKgwBAAAAAAArDAEAAAAAAAAAAAArDAEAAAAAACwMAQAAAAAAAAAAACwMAQAAAAAALQwBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwwBAAAAAAAjDAEAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAI0NAQAAAAAAjg0BAAAAAAAAAAAAjg0BAAAAAACQDQEAAAAAAAAAAACQDQEAAAAAAJENAQAAAAAAAAAAAJENAQAAAAAAkw0BAAAAAAAAAAAAjg0BAAAAAACODQEAAAAAAAIAAAAJCQ",
					"AQAAAAAAAAABAAAAjQ0BAAAAAACNDQEAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"",
					null,
					"AQAAAJENAQAAAAAANA4BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQ0BAAAAAACRDQEAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADwKAQAAAAAAPQoBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAoBAAAAAAA8CgEAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAD0KAQAAAAAAPgoBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQoBAAAAAAA9CgEAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": " bar"
					},
					"BAAAAD4KAQAAAAAAPwoBAAAAAAAAAAAAPwoBAAAAAABACgEAAAAAAAAAAABACgEAAAAAAEEKAQAAAAAAAAAAAEEKAQAAAAAAQgoBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgoBAAAAAAA+CgEAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": " ha"
					},
					"AwAAAEIKAQAAAAAAQwoBAAAAAAAAAAAAQwoBAAAAAABECgEAAAAAAAAAAABECgEAAAAAAEUKAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgoBAAAAAABCCgEAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " un"
					},
					"AwAAAEUKAQAAAAAARgoBAAAAAAAAAAAARgoBAAAAAABHCgEAAAAAAAAAAABHCgEAAAAAAEgKAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQoBAAAAAABFCgEAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": " solo"
					},
					"BQAAAEgKAQAAAAAASQoBAAAAAAAAAAAASQoBAAAAAABKCgEAAAAAAAAAAABKCgEAAAAAAEsKAQAAAAAAAAAAAEsKAQAAAAAATAoBAAAAAAAAAAAATAoBAAAAAABNCgEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAoBAAAAAABICgEAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": " tempo"
					},
					"BgAAAE0KAQAAAAAATgoBAAAAAAAAAAAATgoBAAAAAABPCgEAAAAAAAAAAABPCgEAAAAAAFAKAQAAAAAAAAAAAFAKAQAAAAAAUQoBAAAAAAAAAAAAUQoBAAAAAABSCgEAAAAAAAAAAABSCgEAAAAAAFMKAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQoBAAAAAABNCgEAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAAFMKAQAAAAAAVAoBAAAAAAAAAAAAVAoBAAAAAABVCgEAAAAAAAAAAABVCgEAAAAAAFYKAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwoBAAAAAABTCgEAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " vita"
					},
					"BQAAAFYKAQAAAAAAVwoBAAAAAAAAAAAAVwoBAAAAAABYCgEAAAAAAAAAAABYCgEAAAAAAFkKAQAAAAAAAAAAAFkKAQAAAAAAWgoBAAAAAAAAAAAAWgoBAAAAAABbCgEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgoBAAAAAABWCgEAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFsKAQAAAAAAXAoBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwoBAAAAAABbCgEAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"paste",
					null,
					"AQAAAFwKAQAAAAAAYAoBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAoBAAAAAABcCgEAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "\n\n\t"
					},
					"BgAAAFgOAQAAAAAAWQ4BAAAAAAAAAAAAWQ4BAAAAAABbDgEAAAAAAAAAAABbDgEAAAAAAFwOAQAAAAAAAAAAAFwOAQAAAAAAXg4BAAAAAAAAAAAAWQ4BAAAAAABZDgEAAAAAAAIAAAAJCVwOAQAAAAAAXQ4BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWA4BAAAAAABYDgEAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"",
					null,
					"AQAAAF0OAQAAAAAAcA4BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQ4BAAAAAABdDgEAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHAOAQAAAAAAcQ4BAAAAAAAAAAAAcQ4BAAAAAAB0DgEAAAAAAAAAAAB0DgEAAAAAAHUOAQAAAAAAAAAAAHUOAQAAAAAAeA4BAAAAAAAAAAAAcQ4BAAAAAABxDgEAAAAAAAMAAAAJCQk",
					"AQAAAAAAAAABAAAAcA4BAAAAAABwDgEAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"unindent",
					null,
					"AQAAAHIOAQAAAAAAcg4BAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAdQ4BAAAAAAB1DgEAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"",
					null,
					"AQAAAHQOAQAAAAAAxA4BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdA4BAAAAAAB0DgEAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMQOAQAAAAAAxQ4BAAAAAAAAAAAAxQ4BAAAAAADHDgEAAAAAAAAAAADHDgEAAAAAAMgOAQAAAAAAAAAAAMgOAQAAAAAAyg4BAAAAAAAAAAAAxQ4BAAAAAADFDgEAAAAAAAIAAAAJCQ",
					"AQAAAAAAAAABAAAAxA4BAAAAAADEDgEAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAMgOAQAAAAAAyQ4BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyA4BAAAAAADIDgEAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"",
					null,
					"AQAAAMkOAQAAAAAA2A4BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQ4BAAAAAADJDgEAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAANgOAQAAAAAA2Q4BAAAAAAAAAAAA2Q4BAAAAAADcDgEAAAAAAAAAAADcDgEAAAAAAN0OAQAAAAAAAAAAAN0OAQAAAAAA4A4BAAAAAAAAAAAA2Q4BAAAAAADZDgEAAAAAAAMAAAAJCQk",
					"AQAAAAAAAAABAAAA2A4BAAAAAADYDgEAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"unindent",
					null,
					"AQAAANoOAQAAAAAA2g4BAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAA3Q4BAAAAAADdDgEAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"",
					null,
					"AQAAANwOAQAAAAAAKQ8BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3A4BAAAAAADcDgEAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAABYPAQAAAAAAFw8BAAAAAAAAAAAAFw8BAAAAAAAYDwEAAAAAAAAAAAAYDwEAAAAAABkPAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFg8BAAAAAAAWDwEAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAACwPAQAAAAAALQ8BAAAAAAAAAAAALQ8BAAAAAAAwDwEAAAAAAAAAAAAwDwEAAAAAADEPAQAAAAAAAAAAADEPAQAAAAAANA8BAAAAAAAAAAAALQ8BAAAAAAAtDwEAAAAAAAMAAAAJCQk",
					"AQAAAAAAAAABAAAALA8BAAAAAAAsDwEAAAAAAP///////+9/"
				],
				[
					156,
					1,
					"unindent",
					null,
					"AQAAAC4PAQAAAAAALg8BAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAMQ8BAAAAAAAxDwEAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"",
					null,
					"AQAAADAPAQAAAAAAZBABAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMA8BAAAAAAAwDwEAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAGMPAQAAAAAAZA8BAAAAAAAAAAAAZA8BAAAAAABmDwEAAAAAAAAAAABmDwEAAAAAAGcPAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYw8BAAAAAABjDwEAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAALoPAQAAAAAAuw8BAAAAAAAAAAAAuw8BAAAAAAC+DwEAAAAAAAAAAAC+DwEAAAAAAL8PAQAAAAAAAAAAAL8PAQAAAAAAwg8BAAAAAAAAAAAAuw8BAAAAAAC7DwEAAAAAAAMAAAAJCQk",
					"AQAAAAAAAAABAAAAug8BAAAAAAC6DwEAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"unindent",
					null,
					"AQAAALwPAQAAAAAAvA8BAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAvw8BAAAAAAC/DwEAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAOEPAQAAAAAA4g8BAAAAAAAAAAAA4g8BAAAAAADkDwEAAAAAAAAAAADkDwEAAAAAAOUPAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4Q8BAAAAAADhDwEAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABAQAQAAAAAAERABAAAAAAAAAAAAERABAAAAAAAUEAEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEBABAAAAAAAQEAEAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAANgOAQAAAAAA2Q4BAAAAAAAAAAAA2Q4BAAAAAADaDgEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2A4BAAAAAADYDgEAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "  //"
					},
					"BAAAAC4PAQAAAAAALw8BAAAAAAAAAAAALw8BAAAAAAAwDwEAAAAAAAAAAAAwDwEAAAAAADEPAQAAAAAAAAAAADEPAQAAAAAAMg8BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALg8BAAAAAAAuDwEAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAADIPAQAAAAAAMw8BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMg8BAAAAAAAyDwEAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"left_delete",
					null,
					"AQAAADIPAQAAAAAAMg8BAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAMw8BAAAAAAAzDwEAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "riferimento"
					},
					"CwAAADIPAQAAAAAAMw8BAAAAAAAAAAAAMw8BAAAAAAA0DwEAAAAAAAAAAAA0DwEAAAAAADUPAQAAAAAAAAAAADUPAQAAAAAANg8BAAAAAAAAAAAANg8BAAAAAAA3DwEAAAAAAAAAAAA3DwEAAAAAADgPAQAAAAAAAAAAADgPAQAAAAAAOQ8BAAAAAAAAAAAAOQ8BAAAAAAA6DwEAAAAAAAAAAAA6DwEAAAAAADsPAQAAAAAAAAAAADsPAQAAAAAAPA8BAAAAAAAAAAAAPA8BAAAAAAA9DwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMg8BAAAAAAAyDwEAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": " mutabile"
					},
					"CQAAAD0PAQAAAAAAPg8BAAAAAAAAAAAAPg8BAAAAAAA/DwEAAAAAAAAAAAA/DwEAAAAAAEAPAQAAAAAAAAAAAEAPAQAAAAAAQQ8BAAAAAAAAAAAAQQ8BAAAAAABCDwEAAAAAAAAAAABCDwEAAAAAAEMPAQAAAAAAAAAAAEMPAQAAAAAARA8BAAAAAAAAAAAARA8BAAAAAABFDwEAAAAAAAAAAABFDwEAAAAAAEYPAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQ8BAAAAAAA9DwEAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAEYPAQAAAAAARw8BAAAAAAAAAAAARw8BAAAAAABIDwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARg8BAAAAAABGDwEAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": "  32"
					},
					"BAAAAEgPAQAAAAAASQ8BAAAAAAAAAAAASQ8BAAAAAABKDwEAAAAAAAAAAABKDwEAAAAAAEsPAQAAAAAAAAAAAEsPAQAAAAAATA8BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASA8BAAAAAABIDwEAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": " con"
					},
					"BAAAAEwPAQAAAAAATQ8BAAAAAAAAAAAATQ8BAAAAAABODwEAAAAAAAAAAABODwEAAAAAAE8PAQAAAAAAAAAAAE8PAQAAAAAAUA8BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATA8BAAAAAABMDwEAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": " tempo"
					},
					"BgAAAFAPAQAAAAAAUQ8BAAAAAAAAAAAAUQ8BAAAAAABSDwEAAAAAAAAAAABSDwEAAAAAAFMPAQAAAAAAAAAAAFMPAQAAAAAAVA8BAAAAAAAAAAAAVA8BAAAAAABVDwEAAAAAAAAAAABVDwEAAAAAAFYPAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUA8BAAAAAABQDwEAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAAFYPAQAAAAAAVw8BAAAAAAAAAAAAVw8BAAAAAABYDwEAAAAAAAAAAABYDwEAAAAAAFkPAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVg8BAAAAAABWDwEAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": " vita"
					},
					"BQAAAFkPAQAAAAAAWg8BAAAAAAAAAAAAWg8BAAAAAABbDwEAAAAAAAAAAABbDwEAAAAAAFwPAQAAAAAAAAAAAFwPAQAAAAAAXQ8BAAAAAAAAAAAAXQ8BAAAAAABeDwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQ8BAAAAAABZDwEAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAAF4PAQAAAAAAXw8BAAAAAAAAAAAAXw8BAAAAAABgDwEAAAAAAAAAAABgDwEAAAAAAGEPAQAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXg8BAAAAAABeDwEAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAGEPAQAAAAAAYg8BAAAAAAAAAAAAYg8BAAAAAABjDwEAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQ8BAAAAAABhDwEAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "  //"
					},
					"BAAAAH0KAQAAAAAAfgoBAAAAAAAAAAAAfgoBAAAAAAB/CgEAAAAAAAAAAAB/CgEAAAAAAIAKAQAAAAAAAAAAAIAKAQAAAAAAgQoBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQoBAAAAAAB9CgEAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "RUST_PROJECT_TUTORIAL/README.MD",
			"settings":
			{
				"buffer_size": 1498,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAMQAAAAAAAAAxQAAAAAAAAAAAAAAxQAAAAAAAADGAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAMQAAAAAAAAAxQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"unindent",
					null,
					"AQAAAMQAAAAAAAAAxAAAAAAAAAABAAAACQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUAAAAAAAAAxQAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"reindent",
					null,
					"AQAAAMQAAAAAAAAAxQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAMQAAAAAAAAAxAAAAAAAAAABAAAACQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUAAAAAAAAAxQAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "E"
					},
					"AQAAAMQAAAAAAAAAxQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMUAAAAAAAAAxgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUAAAAAAAAAxQAAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"reindent",
					null,
					"AQAAAMYAAAAAAAAAxwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYAAAAAAAAAxgAAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "ELENCO"
					},
					"BgAAAMcAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADJAAAAAAAAAAAAAADJAAAAAAAAAMoAAAAAAAAAAAAAAMoAAAAAAAAAywAAAAAAAAAAAAAAywAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAAM0AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcAAAAAAAAAxwAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " ERRORI"
					},
					"BwAAAM0AAAAAAAAAzgAAAAAAAAAAAAAAzgAAAAAAAADPAAAAAAAAAAAAAADPAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA0QAAAAAAAAAAAAAA0QAAAAAAAADSAAAAAAAAAAAAAADSAAAAAAAAANMAAAAAAAAAAAAAANMAAAAAAAAA1AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0AAAAAAAAAzQAAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " DI"
					},
					"AwAAANQAAAAAAAAA1QAAAAAAAAAAAAAA1QAAAAAAAADWAAAAAAAAAAAAAADWAAAAAAAAANcAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQAAAAAAAAA1AAAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " RUST"
					},
					"BQAAANcAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADZAAAAAAAAAAAAAADZAAAAAAAAANoAAAAAAAAAAAAAANoAAAAAAAAA2wAAAAAAAAAAAAAA2wAAAAAAAADcAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcAAAAAAAAA1wAAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAANwAAAAAAAAA3QAAAAAAAAAAAAAA3QAAAAAAAADeAAAAAAAAAAAAAADeAAAAAAAAAN8AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "Prestit"
					},
					"BwAAAN8AAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADhAAAAAAAAAAAAAADhAAAAAAAAAOIAAAAAAAAAAAAAAOIAAAAAAAAA4wAAAAAAAAAAAAAA4wAAAAAAAADkAAAAAAAAAAAAAADkAAAAAAAAAOUAAAAAAAAAAAAAAOUAAAAAAAAA5gAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8AAAAAAAAA3wAAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAOYAAAAAAAAA5wAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYAAAAAAAAA5gAAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAAOcAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADpAAAAAAAAAAAAAADpAAAAAAAAAOoAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcAAAAAAAAA5wAAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " variabile"
					},
					"CgAAAOoAAAAAAAAA6wAAAAAAAAAAAAAA6wAAAAAAAADsAAAAAAAAAAAAAADsAAAAAAAAAO0AAAAAAAAAAAAAAO0AAAAAAAAA7gAAAAAAAAAAAAAA7gAAAAAAAADvAAAAAAAAAAAAAADvAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAA8QAAAAAAAAAAAAAA8QAAAAAAAADyAAAAAAAAAAAAAADyAAAAAAAAAPMAAAAAAAAAAAAAAPMAAAAAAAAA9AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoAAAAAAAAA6gAAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\n\t\\1"
					},
					"BQAAAPQAAAAAAAAA9QAAAAAAAAAAAAAA9QAAAAAAAAD3AAAAAAAAAAAAAAD3AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA+QAAAAAAAAAAAAAA+QAAAAAAAAD6AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQAAAAAAAAA9AAAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAPkAAAAAAAAA+QAAAAAAAAABAAAAMQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoAAAAAAAAA+gAAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "1)"
					},
					"AgAAAPkAAAAAAAAA+gAAAAAAAAAAAAAA+gAAAAAAAAD7AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkAAAAAAAAA+QAAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPsAAAAAAAAA/AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsAAAAAAAAA+wAAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"right_delete",
					null,
					"AQAAAPgAAAAAAAAA+AAAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgAAAAAAAAA+AAAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"",
					null,
					"AQAAAPsAAAAAAAAAUQEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsAAAAAAAAA+wAAAAAAAAD////////vfw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAAEYBAAAAAAAARwEAAAAAAAAAAAAARwEAAAAAAABIAQAAAAAAAAAAAABIAQAAAAAAAEkBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYBAAAAAAAARgEAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFQBAAAAAAAAVQEAAAAAAAAAAAAAVQEAAAAAAABcAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQBAAAAAAAAVAEAAAAAAAD////////vfw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAFwBAAAAAAAAXQEAAAAAAAAAAAAAXQEAAAAAAABkAQAAAAAAAAAAAABVAQAAAAAAAFUBAAAAAAAABwAAACAgICAJCQk",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwBAAAAAAAAXAEAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"",
					null,
					"AQAAAF0BAAAAAAAA0wEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0BAAAAAAAAXQEAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					4,
					"indent",
					null,
					"CAAAAL4BAAAAAAAAvwEAAAAAAAAAAAAAzwEAAAAAAADQAQAAAAAAAAAAAAC+AQAAAAAAAL8BAAAAAAAAAAAAANABAAAAAAAA0QEAAAAAAAAAAAAAvgEAAAAAAAC/AQAAAAAAAAAAAADRAQAAAAAAANIBAAAAAAAAAAAAAL4BAAAAAAAAvwEAAAAAAAAAAAAA0gEAAAAAAADTAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMIBAAAAAAAA1AEAAAAAAAAAAAAAAABCQA"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL0BAAAAAAAAvgEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0BAAAAAAAAvQEAAAAAAAD////////vfw"
				],
				[
					47,
					7,
					"right_delete",
					null,
					"BwAAAL4BAAAAAAAAvgEAAAAAAAABAAAACr4BAAAAAAAAvgEAAAAAAAABAAAACb4BAAAAAAAAvgEAAAAAAAABAAAACb4BAAAAAAAAvgEAAAAAAAABAAAACb4BAAAAAAAAvgEAAAAAAAABAAAACb4BAAAAAAAAvgEAAAAAAAABAAAAIL4BAAAAAAAAvgEAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4BAAAAAAAAvgEAAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					2,
					"right_delete",
					null,
					"AgAAAL4BAAAAAAAAvgEAAAAAAAABAAAAIL4BAAAAAAAAvgEAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4BAAAAAAAAvgEAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "                      "
					},
					"FgAAANIBAAAAAAAA0wEAAAAAAAAAAAAA0wEAAAAAAADUAQAAAAAAAAAAAADUAQAAAAAAANUBAAAAAAAAAAAAANUBAAAAAAAA1gEAAAAAAAAAAAAA1gEAAAAAAADXAQAAAAAAAAAAAADXAQAAAAAAANgBAAAAAAAAAAAAANgBAAAAAAAA2QEAAAAAAAAAAAAA2QEAAAAAAADaAQAAAAAAAAAAAADaAQAAAAAAANsBAAAAAAAAAAAAANsBAAAAAAAA3AEAAAAAAAAAAAAA3AEAAAAAAADdAQAAAAAAAAAAAADdAQAAAAAAAN4BAAAAAAAAAAAAAN4BAAAAAAAA3wEAAAAAAAAAAAAA3wEAAAAAAADgAQAAAAAAAAAAAADgAQAAAAAAAOEBAAAAAAAAAAAAAOEBAAAAAAAA4gEAAAAAAAAAAAAA4gEAAAAAAADjAQAAAAAAAAAAAADjAQAAAAAAAOQBAAAAAAAAAAAAAOQBAAAAAAAA5QEAAAAAAAAAAAAA5QEAAAAAAADmAQAAAAAAAAAAAADmAQAAAAAAAOcBAAAAAAAAAAAAAOcBAAAAAAAA6AEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIBAAAAAAAA0gEAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMkBAAAAAAAAygEAAAAAAAAAAAAAygEAAAAAAADSAQAAAAAAAAAAAADSAQAAAAAAANMBAAAAAAAAAAAAANMBAAAAAAAA2wEAAAAAAAAAAAAAygEAAAAAAADKAQAAAAAAAAgAAAAgICAgCQkJIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkBAAAAAAAAyQEAAAAAAAD////////vfw"
				],
				[
					56,
					1,
					"",
					null,
					"AQAAANMBAAAAAAAAaQIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMBAAAAAAAA0wEAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABoCAAAAAAAAGwIAAAAAAAAAAAAAGwIAAAAAAAAjAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoCAAAAAAAAGgIAAAAAAAD////////vfw"
				],
				[
					63,
					4,
					"indent",
					null,
					"CAAAACQCAAAAAAAAJQIAAAAAAAAAAAAAZgIAAAAAAABnAgAAAAAAAAAAAAAkAgAAAAAAACUCAAAAAAAAAAAAAGcCAAAAAAAAaAIAAAAAAAAAAAAAJAIAAAAAAAAlAgAAAAAAAAAAAABoAgAAAAAAAGkCAAAAAAAAAAAAACQCAAAAAAAAJQIAAAAAAAAAAAAAaQIAAAAAAABqAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQCAAAAAAAAcwIAAAAAAAAAAAAAAAAAAA"
				],
				[
					66,
					1,
					"right_delete",
					null,
					"AQAAACICAAAAAAAAIgIAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACICAAAAAAAAIwIAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"right_delete",
					null,
					"AgAAANIBAAAAAAAA0gEAAAAAAAABAAAAIBoCAAAAAAAAGgIAAAAAAAAHAAAAICAgIAkJCQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIBAAAAAAAA0gEAAAAAAAAAAAAAAABiQA"
				],
				[
					71,
					1,
					"indent",
					null,
					"AwAAABsCAAAAAAAAHAIAAAAAAAAAAAAAYQIAAAAAAABiAgAAAAAAAAAAAAB0AgAAAAAAAHUCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8CAAAAAAAAdgIAAAAAAAAAAAAAAABiQA"
				],
				[
					74,
					1,
					"right_delete",
					null,
					"AQAAABoCAAAAAAAAGgIAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoCAAAAAAAAGwIAAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					5,
					"right_delete",
					null,
					"BQAAAHICAAAAAAAAcgIAAAAAAAABAAAACnICAAAAAAAAcgIAAAAAAAABAAAACXICAAAAAAAAcgIAAAAAAAABAAAACXICAAAAAAAAcgIAAAAAAAABAAAACXICAAAAAAAAcgIAAAAAAAABAAAACQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHICAAAAAAAAcgIAAAAAAAD////////vfw"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHICAAAAAAAAcwIAAAAAAAAAAAAAcwIAAAAAAAB4AgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHICAAAAAAAAcgIAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					10,
					"right_delete",
					null,
					"CgAAAHgCAAAAAAAAeAIAAAAAAAABAAAACXgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgCAAAAAAAAeAIAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					7,
					"right_delete",
					null,
					"BwAAAHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIHgCAAAAAAAAeAIAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgCAAAAAAAAeAIAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAIMCAAAAAAAAhAIAAAAAAAAAAAAAhAIAAAAAAACTAgAAAAAAAAAAAACTAgAAAAAAAJQCAAAAAAAAAAAAAJQCAAAAAAAAowIAAAAAAAAAAAAAhAIAAAAAAACEAgAAAAAAAA8AAAAJCQkJCSAgICAgICAgICA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMCAAAAAAAAgwIAAAAAAAD////////vfw"
				],
				[
					89,
					4,
					"unindent",
					null,
					"BAAAAIUCAAAAAAAAhQIAAAAAAAABAAAACYUCAAAAAAAAhQIAAAAAAAABAAAACYUCAAAAAAAAhQIAAAAAAAABAAAACYUCAAAAAAAAhQIAAAAAAAABAAAACQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJQCAAAAAAAAlAIAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAJACAAAAAAAAkQIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJACAAAAAAAAkAIAAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					1,
					"",
					null,
					"AQAAAJECAAAAAAAAVwMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJECAAAAAAAAkQIAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "RUST_PROJECT_TUTORIAL/PROGETTI_RUST/ambito_prestito/src/main.rs",
			"settings":
			{
				"buffer_size": 1649,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAC0AAAAAAAAALgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0AAAAAAAAALQAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAC4AAAAAAAAAFgQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4AAAAAAAAALgAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					2,
					"right_delete",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAtAAAAZm4gbWFpbigpIHsKICAgIHByaW50bG4hKCJIZWxsbywgd29ybGQhIik7Cn0KAAAAAAAAAAAAAAAAAAAAAAEAAAAK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0AAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAL4AAAAAAAAAvwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4AAAAAAAAAvgAAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					2,
					"left_delete",
					null,
					"AgAAAL8AAAAAAAAAvwAAAAAAAAABAAAAJ74AAAAAAAAAvgAAAAAAAAABAAAAMQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAAO4CAAAAAAAA7gIAAAAAAAABAAAAeA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8CAAAAAAAA7wIAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAO4CAAAAAAAA7wIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4CAAAAAAAA7gIAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAAO4CAAAAAAAA7gIAAAAAAAABAAAAeQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8CAAAAAAAA7wIAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAO4CAAAAAAAA7wIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4CAAAAAAAA7gIAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"reindent",
					null,
					"AQAAAKMDAAAAAAAAywMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMDAAAAAAAAowMAAAAAAAAAAAAAAGB1QA"
				],
				[
					34,
					5,
					"unindent",
					null,
					"BQAAAKMDAAAAAAAAowMAAAAAAAAEAAAAICAgIKMDAAAAAAAAowMAAAAAAAAEAAAAICAgIKMDAAAAAAAAowMAAAAAAAAEAAAAICAgIKMDAAAAAAAAowMAAAAAAAAEAAAAICAgIKMDAAAAAAAAowMAAAAAAAAEAAAAICAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsDAAAAAAAAywMAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAALcDAAAAAAAAyQMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcDAAAAAAAAtwMAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAAMYDAAAAAAAAxgMAAAAAAAABAAAAeA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcDAAAAAAAAxwMAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAMYDAAAAAAAAxwMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYDAAAAAAAAxgMAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "--->"
					},
					"BAAAAKsBAAAAAAAArAEAAAAAAAAAAAAArAEAAAAAAACtAQAAAAAAAAAAAACtAQAAAAAAAK4BAAAAAAAAAAAAAK4BAAAAAAAArwEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsBAAAAAAAAqwEAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8BAAAAAAAAsAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8BAAAAAAAArwEAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIQDAAAAAAAAhQMAAAAAAAAAAAAAhQMAAAAAAACGAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQDAAAAAAAAhAMAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIQDAAAAAAAAhQMAAAAAAAAAAAAAhQMAAAAAAACtAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQDAAAAAAAAhAMAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANIDAAAAAAAA0wMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIDAAAAAAAA0gMAAAAAAAD////////vfw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n//qu"
					},
					"BgAAANMDAAAAAAAA1AMAAAAAAAAAAAAA1AMAAAAAAAD8AwAAAAAAAAAAAAD8AwAAAAAAAP0DAAAAAAAAAAAAAP0DAAAAAAAA/gMAAAAAAAAAAAAA/gMAAAAAAAD/AwAAAAAAAAAAAAD/AwAAAAAAAAAEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMDAAAAAAAA0wMAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "indi"
					},
					"BAAAAAAEAAAAAAAAAQQAAAAAAAAAAAAAAQQAAAAAAAACBAAAAAAAAAAAAAACBAAAAAAAAAMEAAAAAAAAAAAAAAMEAAAAAAAABAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " errore"
					},
					"BwAAAAQEAAAAAAAABQQAAAAAAAAAAAAABQQAAAAAAAAGBAAAAAAAAAAAAAAGBAAAAAAAAAcEAAAAAAAAAAAAAAcEAAAAAAAACAQAAAAAAAAAAAAACAQAAAAAAAAJBAAAAAAAAAAAAAAJBAAAAAAAAAoEAAAAAAAAAAAAAAoEAAAAAAAACwQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQEAAAAAAAABAQAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " perche"
					},
					"BwAAAAsEAAAAAAAADAQAAAAAAAAAAAAADAQAAAAAAAANBAAAAAAAAAAAAAANBAAAAAAAAA4EAAAAAAAAAAAAAA4EAAAAAAAADwQAAAAAAAAAAAAADwQAAAAAAAAQBAAAAAAAAAAAAAAQBAAAAAAAABEEAAAAAAAAAAAAABEEAAAAAAAAEgQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsEAAAAAAAACwQAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " PRESTITO"
					},
					"CQAAABIEAAAAAAAAEwQAAAAAAAAAAAAAEwQAAAAAAAAUBAAAAAAAAAAAAAAUBAAAAAAAABUEAAAAAAAAAAAAABUEAAAAAAAAFgQAAAAAAAAAAAAAFgQAAAAAAAAXBAAAAAAAAAAAAAAXBAAAAAAAABgEAAAAAAAAAAAAABgEAAAAAAAAGQQAAAAAAAAAAAAAGQQAAAAAAAAaBAAAAAAAAAAAAAAaBAAAAAAAABsEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIEAAAAAAAAEgQAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " IMMUTABIL"
					},
					"CgAAABsEAAAAAAAAHAQAAAAAAAAAAAAAHAQAAAAAAAAdBAAAAAAAAAAAAAAdBAAAAAAAAB4EAAAAAAAAAAAAAB4EAAAAAAAAHwQAAAAAAAAAAAAAHwQAAAAAAAAgBAAAAAAAAAAAAAAgBAAAAAAAACEEAAAAAAAAAAAAACEEAAAAAAAAIgQAAAAAAAAAAAAAIgQAAAAAAAAjBAAAAAAAAAAAAAAjBAAAAAAAACQEAAAAAAAAAAAAACQEAAAAAAAAJQQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsEAAAAAAAAGwQAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "E"
					},
					"AQAAACUEAAAAAAAAJgQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUEAAAAAAAAJQQAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD4BAAAAAAAAPwEAAAAAAAAAAAAAPwEAAAAAAABTAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4BAAAAAAAAPgEAAAAAAAAAAAAAAIBmQA"
				],
				[
					68,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFIBAAAAAAAAVAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIBAAAAAAAAUgEAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"right_delete",
					null,
					"AQAAAFMBAAAAAAAAUwEAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMBAAAAAAAAUwEAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAMMCAAAAAAAAxAIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMCAAAAAAAAwwIAAAAAAAAAAAAAAIBmQA"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFIEAAAAAAAAUwQAAAAAAAAAAAAAUwQAAAAAAABUBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIEAAAAAAAAUgQAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": ",Y"
					},
					"AgAAAAsDAAAAAAAADAMAAAAAAAAAAAAADAMAAAAAAAANAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsDAAAAAAAACwMAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "{}"
					},
					"AgAAAAcDAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAJAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcDAAAAAAAABwMAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "X="
					},
					"AgAAAAUDAAAAAAAABgMAAAAAAAAAAAAABgMAAAAAAAAHAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUDAAAAAAAABQMAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAcDAAAAAAAACAMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcDAAAAAAAABwMAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " Y"
					},
					"AgAAAAoDAAAAAAAACwMAAAAAAAAAAAAACwMAAAAAAAAMAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoDAAAAAAAACgMAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAAwDAAAAAAAADQMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwDAAAAAAAADAMAAAAAAAAAAAAAAADwvw"
				],
				[
					121,
					1,
					"left_delete",
					null,
					"AQAAABQDAAAAAAAAFAMAAAAAAAABAAAAWQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUDAAAAAAAAFQMAAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "Y"
					},
					"AQAAABQDAAAAAAAAFQMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQDAAAAAAAAFAMAAAAAAAAAAAAAAADwvw"
				],
				[
					123,
					1,
					"left_delete",
					null,
					"AQAAABQDAAAAAAAAFAMAAAAAAAABAAAAWQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUDAAAAAAAAFQMAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "Y"
					},
					"AQAAABQDAAAAAAAAFQMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQDAAAAAAAAFAMAAAAAAAAAAAAAAADwvw"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAABQDAAAAAAAAFAMAAAAAAAABAAAAWQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUDAAAAAAAAFQMAAAAAAAAAAAAAAADwvw"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAABQDAAAAAAAAFQMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQDAAAAAAAAFAMAAAAAAAAAAAAAAADwvw"
				],
				[
					127,
					2,
					"left_delete",
					null,
					"AgAAABQDAAAAAAAAFAMAAAAAAAABAAAAeRMDAAAAAAAAEwMAAAAAAAABAAAALA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUDAAAAAAAAFQMAAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					4,
					"right_delete",
					null,
					"BAAAAAsDAAAAAAAACwMAAAAAAAABAAAAWQsDAAAAAAAACwMAAAAAAAABAAAAPQsDAAAAAAAACwMAAAAAAAABAAAAewsDAAAAAAAACwMAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsDAAAAAAAACwMAAAAAAAAAAAAAAADwvw"
				],
				[
					137,
					1,
					"cut",
					null,
					"AQAAAFYEAAAAAAAAVgQAAAAAAAAUAAAALy9wcmludGxuISgie30iLCB5KTs",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoEAAAAAAAAVgQAAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMMCAAAAAAAAxAIAAAAAAAAAAAAAxAIAAAAAAADYAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMCAAAAAAAAwwIAAAAAAAAAAAAAAIBmQA"
				],
				[
					141,
					1,
					"paste",
					null,
					"AQAAAMMCAAAAAAAA1wIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMCAAAAAAAAwwIAAAAAAAAAAAAAAIBmQA"
				],
				[
					144,
					2,
					"right_delete",
					null,
					"AgAAAMMCAAAAAAAAwwIAAAAAAAABAAAAL8MCAAAAAAAAwwIAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMCAAAAAAAAwwIAAAAAAAAAAAAAAADwvw"
				],
				[
					149,
					1,
					"cut",
					null,
					"AQAAAP8CAAAAAAAA/wIAAAAAAAANAAAALy8gcG9zc2Vzc29yZQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwDAAAAAAAA/wIAAAAAAAAAAAAAAADwvw"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK4CAAAAAAAArwIAAAAAAAAAAAAArwIAAAAAAADXAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4CAAAAAAAArgIAAAAAAAD////////vfw"
				],
				[
					153,
					1,
					"paste",
					null,
					"AQAAANcCAAAAAAAA5AIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcCAAAAAAAA1wIAAAAAAAAAAAAAAADwvw"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "y="
					},
					"AgAAAAMDAAAAAAAABAMAAAAAAAAAAAAABAMAAAAAAAAFAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMDAAAAAAAAAwMAAAAAAAAAAAAAAADwvw"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUDAAAAAAAABgMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUDAAAAAAAABQMAAAAAAAAAAAAAAADwvw"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "PRESTITO"
					},
					"CAAAAAMDAAAAAAAABAMAAAAAAAAAAAAABAMAAAAAAAAFAwAAAAAAAAAAAAAFAwAAAAAAAAYDAAAAAAAAAAAAAAYDAAAAAAAABwMAAAAAAAAAAAAABwMAAAAAAAAIAwAAAAAAAAAAAAAIAwAAAAAAAAkDAAAAAAAAAAAAAAkDAAAAAAAACgMAAAAAAAAAAAAACgMAAAAAAAALAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMDAAAAAAAAAwMAAAAAAAAAAAAAAADwvw"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " MUTABILE"
					},
					"CQAAAAsDAAAAAAAADAMAAAAAAAAAAAAADAMAAAAAAAANAwAAAAAAAAAAAAANAwAAAAAAAA4DAAAAAAAAAAAAAA4DAAAAAAAADwMAAAAAAAAAAAAADwMAAAAAAAAQAwAAAAAAAAAAAAAQAwAAAAAAABEDAAAAAAAAAAAAABEDAAAAAAAAEgMAAAAAAAAAAAAAEgMAAAAAAAATAwAAAAAAAAAAAAATAwAAAAAAABQDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsDAAAAAAAACwMAAAAAAAAAAAAAAADwvw"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": " A"
					},
					"AgAAABQDAAAAAAAAFQMAAAAAAAAAAAAAFQMAAAAAAAAWAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQDAAAAAAAAFAMAAAAAAAAAAAAAAADwvw"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABYDAAAAAAAAFwMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYDAAAAAAAAFgMAAAAAAAAAAAAAAADwvw"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "fis"
					},
					"AwAAAGwDAAAAAAAAbQMAAAAAAAAAAAAAbQMAAAAAAABuAwAAAAAAAAAAAABuAwAAAAAAAG8DAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwDAAAAAAAAbAMAAAAAAAAAAAAAAADwvw"
				],
				[
					166,
					1,
					"left_delete",
					null,
					"AQAAAG4DAAAAAAAAbgMAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8DAAAAAAAAbwMAAAAAAAAAAAAAAADwvw"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "nisc"
					},
					"BAAAAG4DAAAAAAAAbwMAAAAAAAAAAAAAbwMAAAAAAABwAwAAAAAAAAAAAABwAwAAAAAAAHEDAAAAAAAAAAAAAHEDAAAAAAAAcgMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4DAAAAAAAAbgMAAAAAAAAAAAAAAADwvw"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " lo"
					},
					"AwAAAHIDAAAAAAAAcwMAAAAAAAAAAAAAcwMAAAAAAAB0AwAAAAAAAAAAAAB0AwAAAAAAAHUDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIDAAAAAAAAcgMAAAAAAAAAAAAAAADwvw"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": " scopo"
					},
					"BgAAAHUDAAAAAAAAdgMAAAAAAAAAAAAAdgMAAAAAAAB3AwAAAAAAAAAAAAB3AwAAAAAAAHgDAAAAAAAAAAAAAHgDAAAAAAAAeQMAAAAAAAAAAAAAeQMAAAAAAAB6AwAAAAAAAAAAAAB6AwAAAAAAAHsDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUDAAAAAAAAdQMAAAAAAAAAAAAAAADwvw"
				],
				[
					170,
					1,
					"left_delete",
					null,
					"AQAAAHoDAAAAAAAAegMAAAAAAAABAAAAbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsDAAAAAAAAewMAAAAAAAAAAAAAAADwvw"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAHoDAAAAAAAAewMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoDAAAAAAAAegMAAAAAAAAAAAAAAADwvw"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": " torna"
					},
					"BgAAAHsDAAAAAAAAfAMAAAAAAAAAAAAAfAMAAAAAAAB9AwAAAAAAAAAAAAB9AwAAAAAAAH4DAAAAAAAAAAAAAH4DAAAAAAAAfwMAAAAAAAAAAAAAfwMAAAAAAACAAwAAAAAAAAAAAACAAwAAAAAAAIEDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsDAAAAAAAAewMAAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAIEDAAAAAAAAggMAAAAAAAAAAAAAggMAAAAAAACDAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEDAAAAAAAAgQMAAAAAAAAAAAAAAADwvw"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIMDAAAAAAAAhAMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMDAAAAAAAAgwMAAAAAAAAAAAAAAADwvw"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "E"
					},
					"AQAAAHIDAAAAAAAAcwMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIDAAAAAAAAcgMAAAAAAAAAAAAAAADwvw"
				],
				[
					178,
					1,
					"left_delete",
					null,
					"AQAAAHIDAAAAAAAAcgMAAAAAAAABAAAARQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMDAAAAAAAAcwMAAAAAAAAAAAAAAADwvw"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAHIDAAAAAAAAcwMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIDAAAAAAAAcgMAAAAAAAAAAAAAAADwvw"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAAHwDAAAAAAAAfQMAAAAAAAAAAAAAfQMAAAAAAAB+AwAAAAAAAAAAAAB+AwAAAAAAAH8DAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwDAAAAAAAAfAMAAAAAAAAAAAAAAADwvw"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": " y"
					},
					"AgAAAH8DAAAAAAAAgAMAAAAAAAAAAAAAgAMAAAAAAACBAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8DAAAAAAAAfwMAAAAAAAAAAAAAAADwvw"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAIIDAAAAAAAAgwMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIDAAAAAAAAggMAAAAAAAAAAAAAAADwvw"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIMDAAAAAAAAhAMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMDAAAAAAAAgwMAAAAAAAAAAAAAAADwvw"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": " il"
					},
					"AwAAAIMDAAAAAAAAhAMAAAAAAAAAAAAAhAMAAAAAAACFAwAAAAAAAAAAAACFAwAAAAAAAIYDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMDAAAAAAAAgwMAAAAAAAAAAAAAAADwvw"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": " posesso"
					},
					"CAAAAIYDAAAAAAAAhwMAAAAAAAAAAAAAhwMAAAAAAACIAwAAAAAAAAAAAACIAwAAAAAAAIkDAAAAAAAAAAAAAIkDAAAAAAAAigMAAAAAAAAAAAAAigMAAAAAAACLAwAAAAAAAAAAAACLAwAAAAAAAIwDAAAAAAAAAAAAAIwDAAAAAAAAjQMAAAAAAAAAAAAAjQMAAAAAAACOAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYDAAAAAAAAhgMAAAAAAAAAAAAAAADwvw"
				],
				[
					191,
					1,
					"left_delete",
					null,
					"AQAAABUDAAAAAAAAFQMAAAAAAAABAAAAQQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYDAAAAAAAAFgMAAAAAAAAAAAAAAADwvw"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAABUDAAAAAAAAFgMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUDAAAAAAAAFQMAAAAAAAAAAAAAAADwvw"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BwAAAB0DAAAAAAAAHgMAAAAAAAAAAAAAHgMAAAAAAAAyAwAAAAAAAAAAAAAeAwAAAAAAAB4DAAAAAAAAFAAAACAgICAgICAgICAgICAgICAgICAgHgMAAAAAAAA2AwAAAAAAAAAAAAA2AwAAAAAAADcDAAAAAAAAAAAAADcDAAAAAAAATwMAAAAAAAAAAAAAHgMAAAAAAAAeAwAAAAAAABgAAAAgICAgICAgICAgICAgICAgICAgICAgICA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0DAAAAAAAAHQMAAAAAAAAAAAAAAADwvw"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"BQAAAB0DAAAAAAAAHgMAAAAAAAAAAAAAHgMAAAAAAAAyAwAAAAAAAAAAAAAeAwAAAAAAAB4DAAAAAAAAFAAAACAgICAgICAgICAgICAgICAgICAgHgMAAAAAAAA2AwAAAAAAAAAAAAA2AwAAAAAAADoDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0DAAAAAAAAHQMAAAAAAAD////////vfw"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": "-------------------------------------"
					},
					"JQAAADcDAAAAAAAAOAMAAAAAAAAAAAAAOAMAAAAAAAA5AwAAAAAAAAAAAAA5AwAAAAAAADoDAAAAAAAAAAAAADoDAAAAAAAAOwMAAAAAAAAAAAAAOwMAAAAAAAA8AwAAAAAAAAAAAAA8AwAAAAAAAD0DAAAAAAAAAAAAAD0DAAAAAAAAPgMAAAAAAAAAAAAAPgMAAAAAAAA/AwAAAAAAAAAAAAA/AwAAAAAAAEADAAAAAAAAAAAAAEADAAAAAAAAQQMAAAAAAAAAAAAAQQMAAAAAAABCAwAAAAAAAAAAAABCAwAAAAAAAEMDAAAAAAAAAAAAAEMDAAAAAAAARAMAAAAAAAAAAAAARAMAAAAAAABFAwAAAAAAAAAAAABFAwAAAAAAAEYDAAAAAAAAAAAAAEYDAAAAAAAARwMAAAAAAAAAAAAARwMAAAAAAABIAwAAAAAAAAAAAABIAwAAAAAAAEkDAAAAAAAAAAAAAEkDAAAAAAAASgMAAAAAAAAAAAAASgMAAAAAAABLAwAAAAAAAAAAAABLAwAAAAAAAEwDAAAAAAAAAAAAAEwDAAAAAAAATQMAAAAAAAAAAAAATQMAAAAAAABOAwAAAAAAAAAAAABOAwAAAAAAAE8DAAAAAAAAAAAAAE8DAAAAAAAAUAMAAAAAAAAAAAAAUAMAAAAAAABRAwAAAAAAAAAAAABRAwAAAAAAAFIDAAAAAAAAAAAAAFIDAAAAAAAAUwMAAAAAAAAAAAAAUwMAAAAAAABUAwAAAAAAAAAAAABUAwAAAAAAAFUDAAAAAAAAAAAAAFUDAAAAAAAAVgMAAAAAAAAAAAAAVgMAAAAAAABXAwAAAAAAAAAAAABXAwAAAAAAAFgDAAAAAAAAAAAAAFgDAAAAAAAAWQMAAAAAAAAAAAAAWQMAAAAAAABaAwAAAAAAAAAAAABaAwAAAAAAAFsDAAAAAAAAAAAAAFsDAAAAAAAAXAMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcDAAAAAAAANwMAAAAAAAAAAAAAAADwvw"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAB0DAAAAAAAAHgMAAAAAAAAAAAAAHgMAAAAAAAAfAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0DAAAAAAAAHQMAAAAAAAAAAAAAAHCBQA"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAGEDAAAAAAAAYgMAAAAAAAAAAAAAYgMAAAAAAABjAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGEDAAAAAAAAYQMAAAAAAAD////////vfw"
				],
				[
					209,
					1,
					"reindent",
					null,
					"AQAAAGQDAAAAAAAAfQMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQDAAAAAAAAZAMAAAAAAAAAAAAAAADwvw"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "ho"
					},
					"AgAAAH0DAAAAAAAAfgMAAAAAAAAAAAAAfgMAAAAAAAB/AwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0DAAAAAAAAfQMAAAAAAAAAAAAAAADwvw"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": " messo"
					},
					"BgAAAH8DAAAAAAAAgAMAAAAAAAAAAAAAgAMAAAAAAACBAwAAAAAAAAAAAACBAwAAAAAAAIIDAAAAAAAAAAAAAIIDAAAAAAAAgwMAAAAAAAAAAAAAgwMAAAAAAACEAwAAAAAAAAAAAACEAwAAAAAAAIUDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8DAAAAAAAAfwMAAAAAAAAAAAAAAADwvw"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": " le"
					},
					"AwAAAIUDAAAAAAAAhgMAAAAAAAAAAAAAhgMAAAAAAACHAwAAAAAAAAAAAACHAwAAAAAAAIgDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUDAAAAAAAAhQMAAAAAAAAAAAAAAADwvw"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": " gra"
					},
					"BAAAAIgDAAAAAAAAiQMAAAAAAAAAAAAAiQMAAAAAAACKAwAAAAAAAAAAAACKAwAAAAAAAIsDAAAAAAAAAAAAAIsDAAAAAAAAjAMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgDAAAAAAAAiAMAAAAAAAAAAAAAAADwvw"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "ffe"
					},
					"AwAAAIwDAAAAAAAAjQMAAAAAAAAAAAAAjQMAAAAAAACOAwAAAAAAAAAAAACOAwAAAAAAAI8DAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwDAAAAAAAAjAMAAAAAAAAAAAAAAADwvw"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": " per"
					},
					"BAAAAI8DAAAAAAAAkAMAAAAAAAAAAAAAkAMAAAAAAACRAwAAAAAAAAAAAACRAwAAAAAAAJIDAAAAAAAAAAAAAJIDAAAAAAAAkwMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8DAAAAAAAAjwMAAAAAAAAAAAAAAADwvw"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": " lo"
					},
					"AwAAAJMDAAAAAAAAlAMAAAAAAAAAAAAAlAMAAAAAAACVAwAAAAAAAAAAAACVAwAAAAAAAJYDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMDAAAAAAAAkwMAAAAAAAAAAAAAAADwvw"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": " scope"
					},
					"BgAAAJYDAAAAAAAAlwMAAAAAAAAAAAAAlwMAAAAAAACYAwAAAAAAAAAAAACYAwAAAAAAAJkDAAAAAAAAAAAAAJkDAAAAAAAAmgMAAAAAAAAAAAAAmgMAAAAAAACbAwAAAAAAAAAAAACbAwAAAAAAAJwDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYDAAAAAAAAlgMAAAAAAAAAAAAAAADwvw"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAAJwDAAAAAAAAnQMAAAAAAAAAAAAAnQMAAAAAAACeAwAAAAAAAAAAAACeAwAAAAAAAJ8DAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwDAAAAAAAAnAMAAAAAAAAAAAAAAADwvw"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": " y"
					},
					"AgAAAJ8DAAAAAAAAoAMAAAAAAAAAAAAAoAMAAAAAAAChAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8DAAAAAAAAnwMAAAAAAAAAAAAAAADwvw"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": " e"
					},
					"AgAAAKEDAAAAAAAAogMAAAAAAAAAAAAAogMAAAAAAACjAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEDAAAAAAAAoQMAAAAAAAAAAAAAAADwvw"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": " questa"
					},
					"BwAAAKMDAAAAAAAApAMAAAAAAAAAAAAApAMAAAAAAAClAwAAAAAAAAAAAAClAwAAAAAAAKYDAAAAAAAAAAAAAKYDAAAAAAAApwMAAAAAAAAAAAAApwMAAAAAAACoAwAAAAAAAAAAAACoAwAAAAAAAKkDAAAAAAAAAAAAAKkDAAAAAAAAqgMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMDAAAAAAAAowMAAAAAAAAAAAAAAADwvw"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKoDAAAAAAAAqwMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKoDAAAAAAAAqgMAAAAAAAAAAAAAAADwvw"
				],
				[
					223,
					2,
					"left_delete",
					null,
					"AgAAAKoDAAAAAAAAqgMAAAAAAAABAAAAIKkDAAAAAAAAqQMAAAAAAAABAAAAYQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsDAAAAAAAAqwMAAAAAAAAAAAAAAADwvw"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAKkDAAAAAAAAqgMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkDAAAAAAAAqQMAAAAAAAAAAAAAAADwvw"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": " e"
					},
					"AgAAAKoDAAAAAAAAqwMAAAAAAAAAAAAAqwMAAAAAAACsAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKoDAAAAAAAAqgMAAAAAAAAAAAAAAADwvw"
				],
				[
					226,
					1,
					"left_delete",
					null,
					"AQAAAKsDAAAAAAAAqwMAAAAAAAABAAAAZQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwDAAAAAAAArAMAAAAAAAAAAAAAAADwvw"
				],
				[
					227,
					1,
					"insert",
					{
						"characters": "è\\"
					},
					"AgAAAKsDAAAAAAAArAMAAAAAAAAAAAAArAMAAAAAAACtAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsDAAAAAAAAqwMAAAAAAAAAAAAAAADwvw"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAK0DAAAAAAAArgMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0DAAAAAAAArQMAAAAAAAAAAAAAAADwvw"
				],
				[
					229,
					1,
					"insert_completion",
					{
						"completion": "fn",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "fn"
					},
					"AgAAAK0DAAAAAAAArQMAAAAAAAABAAAAbq0DAAAAAAAArwMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4DAAAAAAAArgMAAAAAAAAAAAAAAADwvw"
				],
				[
					230,
					2,
					"left_delete",
					null,
					"AgAAAK4DAAAAAAAArgMAAAAAAAABAAAAbq0DAAAAAAAArQMAAAAAAAABAAAAZg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8DAAAAAAAArwMAAAAAAAAAAAAAAADwvw"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAK0DAAAAAAAArgMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0DAAAAAAAArQMAAAAAAAAAAAAAAADwvw"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "\nil"
					},
					"BAAAAK4DAAAAAAAArwMAAAAAAAAAAAAArwMAAAAAAADIAwAAAAAAAAAAAADIAwAAAAAAAMkDAAAAAAAAAAAAAMkDAAAAAAAAygMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4DAAAAAAAArgMAAAAAAAAAAAAAAADwvw"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": " valore"
					},
					"BwAAAMoDAAAAAAAAywMAAAAAAAAAAAAAywMAAAAAAADMAwAAAAAAAAAAAADMAwAAAAAAAM0DAAAAAAAAAAAAAM0DAAAAAAAAzgMAAAAAAAAAAAAAzgMAAAAAAADPAwAAAAAAAAAAAADPAwAAAAAAANADAAAAAAAAAAAAANADAAAAAAAA0QMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoDAAAAAAAAygMAAAAAAAAAAAAAAADwvw"
				],
				[
					234,
					9,
					"left_delete",
					null,
					"CQAAANADAAAAAAAA0AMAAAAAAAABAAAAZc8DAAAAAAAAzwMAAAAAAAABAAAAcs4DAAAAAAAAzgMAAAAAAAABAAAAb80DAAAAAAAAzQMAAAAAAAABAAAAbMwDAAAAAAAAzAMAAAAAAAABAAAAYcsDAAAAAAAAywMAAAAAAAABAAAAdsoDAAAAAAAAygMAAAAAAAABAAAAIMkDAAAAAAAAyQMAAAAAAAABAAAAbMgDAAAAAAAAyAMAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEDAAAAAAAA0QMAAAAAAAAAAAAAAADwvw"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAMgDAAAAAAAAyQMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgDAAAAAAAAyAMAAAAAAAAAAAAAAADwvw"
				],
				[
					236,
					1,
					"insert_snippet",
					{
						"contents": "'"
					},
					"AQAAAMkDAAAAAAAAygMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkDAAAAAAAAyQMAAAAAAAAAAAAAAADwvw"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": "are"
					},
					"AwAAAMoDAAAAAAAAywMAAAAAAAAAAAAAywMAAAAAAADMAwAAAAAAAAAAAADMAwAAAAAAAM0DAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoDAAAAAAAAygMAAAAAAAAAAAAAAADwvw"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM0DAAAAAAAAzgMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0DAAAAAAAAzQMAAAAAAAAAAAAAAADwvw"
				],
				[
					239,
					1,
					"left_delete",
					null,
					"AQAAAM0DAAAAAAAAzQMAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4DAAAAAAAAzgMAAAAAAAAAAAAAAADwvw"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAM0DAAAAAAAAzgMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0DAAAAAAAAzQMAAAAAAAAAAAAAAADwvw"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAAM4DAAAAAAAAzwMAAAAAAAAAAAAAzwMAAAAAAADQAwAAAAAAAAAAAADQAwAAAAAAANEDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4DAAAAAAAAzgMAAAAAAAAAAAAAAADwvw"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANEDAAAAAAAA0gMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEDAAAAAAAA0QMAAAAAAAAAAAAAAADwvw"
				],
				[
					243,
					15,
					"right_delete",
					null,
					"DwAAANIDAAAAAAAA0gMAAAAAAAABAAAACtIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIDAAAAAAAA0gMAAAAAAAAAAAAAAADwvw"
				],
				[
					244,
					9,
					"right_delete",
					null,
					"CQAAANIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAINIDAAAAAAAA0gMAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIDAAAAAAAA0gMAAAAAAAAAAAAAAADwvw"
				],
				[
					245,
					1,
					"right_delete",
					null,
					"AQAAANIDAAAAAAAA0gMAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIDAAAAAAAA0gMAAAAAAAAAAAAAAADwvw"
				],
				[
					249,
					1,
					"right_delete",
					null,
					"AQAAABwDAAAAAAAAHAMAAAAAAAABAAAAIg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwDAAAAAAAAHAMAAAAAAAAAAAAAAADwvw"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": "Y\""
					},
					"AgAAANEDAAAAAAAA0gMAAAAAAAAAAAAA0gMAAAAAAADTAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEDAAAAAAAA0QMAAAAAAAAAAAAAAADwvw"
				],
				[
					255,
					2,
					"left_delete",
					null,
					"AgAAAKwDAAAAAAAArAMAAAAAAAABAAAAbqsDAAAAAAAAqwMAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0DAAAAAAAArQMAAAAAAAD////////vfw"
				],
				[
					257,
					4,
					"left_delete",
					null,
					"BAAAAGEDAAAAAAAAYQMAAAAAAAABAAAAbmADAAAAAAAAYAMAAAAAAAABAAAAXF8DAAAAAAAAXwMAAAAAAAABAAAAIF4DAAAAAAAAXgMAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGIDAAAAAAAAYgMAAAAAAAAAAAAAAECEQA"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": "\n\t\t"
					},
					"BAAAAE0EAAAAAAAATgQAAAAAAAAAAAAATgQAAAAAAABiBAAAAAAAAAAAAABiBAAAAAAAAGYEAAAAAAAAAAAAAGYEAAAAAAAAagQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0EAAAAAAAATQQAAAAAAAAAAAAAAADwvw"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": "  e"
					},
					"AwAAAGoEAAAAAAAAawQAAAAAAAAAAAAAawQAAAAAAABsBAAAAAAAAAAAAABsBAAAAAAAAG0EAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoEAAAAAAAAagQAAAAAAAAAAAAAAADwvw"
				],
				[
					265,
					1,
					"insert",
					{
						"characters": " il"
					},
					"AwAAAG0EAAAAAAAAbgQAAAAAAAAAAAAAbgQAAAAAAABvBAAAAAAAAAAAAABvBAAAAAAAAHAEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0EAAAAAAAAbQQAAAAAAAAAAAAAAADwvw"
				],
				[
					266,
					1,
					"insert",
					{
						"characters": " valore"
					},
					"BwAAAHAEAAAAAAAAcQQAAAAAAAAAAAAAcQQAAAAAAAByBAAAAAAAAAAAAAByBAAAAAAAAHMEAAAAAAAAAAAAAHMEAAAAAAAAdAQAAAAAAAAAAAAAdAQAAAAAAAB1BAAAAAAAAAAAAAB1BAAAAAAAAHYEAAAAAAAAAAAAAHYEAAAAAAAAdwQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAEAAAAAAAAcAQAAAAAAAAAAAAAAADwvw"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAAHcEAAAAAAAAeAQAAAAAAAAAAAAAeAQAAAAAAAB5BAAAAAAAAAAAAAB5BAAAAAAAAHoEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcEAAAAAAAAdwQAAAAAAAAAAAAAAADwvw"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": " x"
					},
					"AgAAAHoEAAAAAAAAewQAAAAAAAAAAAAAewQAAAAAAAB8BAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoEAAAAAAAAegQAAAAAAAAAAAAAAADwvw"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": " passa"
					},
					"BgAAAHwEAAAAAAAAfQQAAAAAAAAAAAAAfQQAAAAAAAB+BAAAAAAAAAAAAAB+BAAAAAAAAH8EAAAAAAAAAAAAAH8EAAAAAAAAgAQAAAAAAAAAAAAAgAQAAAAAAACBBAAAAAAAAAAAAACBBAAAAAAAAIIEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwEAAAAAAAAfAQAAAAAAAAAAAAAAADwvw"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": " d"
					},
					"AgAAAIIEAAAAAAAAgwQAAAAAAAAAAAAAgwQAAAAAAACEBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIEAAAAAAAAggQAAAAAAAAAAAAAAADwvw"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIQEAAAAAAAAhQQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQEAAAAAAAAhAQAAAAAAAAAAAAAAADwvw"
				],
				[
					272,
					1,
					"left_delete",
					null,
					"AQAAAIQEAAAAAAAAhAQAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUEAAAAAAAAhQQAAAAAAAAAAAAAAADwvw"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAIQEAAAAAAAAhQQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQEAAAAAAAAhAQAAAAAAAAAAAAAAADwvw"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": " 5"
					},
					"AgAAAIUEAAAAAAAAhgQAAAAAAAAAAAAAhgQAAAAAAACHBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUEAAAAAAAAhQQAAAAAAAAAAAAAAADwvw"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAIcEAAAAAAAAiAQAAAAAAAAAAAAAiAQAAAAAAACJBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcEAAAAAAAAhwQAAAAAAAAAAAAAAADwvw"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": " --->"
					},
					"BQAAAIkEAAAAAAAAigQAAAAAAAAAAAAAigQAAAAAAACLBAAAAAAAAAAAAACLBAAAAAAAAIwEAAAAAAAAAAAAAIwEAAAAAAAAjQQAAAAAAAAAAAAAjQQAAAAAAACOBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkEAAAAAAAAiQQAAAAAAAAAAAAAAADwvw"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI4EAAAAAAAAjwQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4EAAAAAAAAjgQAAAAAAAAAAAAAAADwvw"
				],
				[
					293,
					1,
					"cut",
					null,
					"AQAAAEoEAAAAAAAASgQAAAAAAAACAAAAe30",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwEAAAAAAAASgQAAAAAAAAAAAAAAADwvw"
				],
				[
					298,
					1,
					"paste",
					null,
					"AQAAAI0EAAAAAAAAjwQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0EAAAAAAAAjQQAAAAAAAAAAAAAAADwvw"
				],
				[
					321,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAAgAAAAAAAAADAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAABSQA"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAJgAAAAAAAAAAAAAADQAAAAAAAAANAAAAAAAAAAwAAAAgICAgICAgICAgICA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAADwvw"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": "//@esem"
					},
					"BwAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAAAEwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAABbQA"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": "pio@"
					},
					"BAAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMAAAAAAAAAEwAAAAAAAAAAAAAAAADwvw"
				],
				[
					326,
					1,
					"insert",
					{
						"characters": "di"
					},
					"AgAAABcAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcAAAAAAAAAFwAAAAAAAAAAAAAAAADwvw"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAABkAAAAAAAAAGgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkAAAAAAAAAGQAAAAAAAAAAAAAAAADwvw"
				],
				[
					328,
					1,
					"left_delete",
					null,
					"AQAAABkAAAAAAAAAGQAAAAAAAAABAAAAYQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoAAAAAAAAAGgAAAAAAAAAAAAAAAADwvw"
				],
				[
					329,
					1,
					"insert",
					{
						"characters": "@"
					},
					"AQAAABkAAAAAAAAAGgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkAAAAAAAAAGQAAAAAAAAAAAAAAAADwvw"
				],
				[
					330,
					1,
					"left_delete",
					null,
					"AQAAABkAAAAAAAAAGQAAAAAAAAABAAAAQA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoAAAAAAAAAGgAAAAAAAAAAAAAAAADwvw"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAABkAAAAAAAAAGgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkAAAAAAAAAGQAAAAAAAAAAAAAAAADwvw"
				],
				[
					332,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABoAAAAAAAAAHAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoAAAAAAAAAGgAAAAAAAAAAAAAAAADwvw"
				],
				[
					333,
					1,
					"insert",
					{
						"characters": "area"
					},
					"BAAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsAAAAAAAAAGwAAAAAAAAAAAAAAAADwvw"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": " scope"
					},
					"BgAAAB8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACIAAAAAAAAAAAAAACIAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACUAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8AAAAAAAAAHwAAAAAAAAAAAAAAAADwvw"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACgAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": " y"
					},
					"AgAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAADwvw"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACoAAAAAAAAAKwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACoAAAAAAAAAKgAAAAAAAAAAAAAAAADwvw"
				],
				[
					344,
					1,
					"left_delete",
					null,
					"AQAAACoAAAAAAAAAKgAAAAAAAAABAAAALA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsAAAAAAAAAKwAAAAAAAAAAAAAAAADwvw"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACsAAAAAAAAALAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsAAAAAAAAAKwAAAAAAAAAAAAAAAADwvw"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": "prog"
					},
					"BAAAACwAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC8AAAAAAAAAAAAAAC8AAAAAAAAAMAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwAAAAAAAAALAAAAAAAAAAAAAAAAADwvw"
				],
				[
					348,
					1,
					"insert",
					{
						"characters": "etto"
					},
					"BAAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAANAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAADwvw"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": " di"
					},
					"AwAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQAAAAAAAAANAAAAAAAAAAAAAAAAADwvw"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": " rusta"
					},
					"BgAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAD0AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcAAAAAAAAANwAAAAAAAAAAAAAAAADwvw"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": " per"
					},
					"BAAAAD0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAQQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0AAAAAAAAAPQAAAAAAAAAAAAAAAADwvw"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": " la"
					},
					"AwAAAEEAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAEQAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEAAAAAAAAAQQAAAAAAAAAAAAAAAADwvw"
				],
				[
					353,
					1,
					"insert",
					{
						"characters": " verifica."
					},
					"CgAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAEcAAAAAAAAAAAAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAEoAAAAAAAAAAAAAAEoAAAAAAAAASwAAAAAAAAAAAAAASwAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAAAE0AAAAAAAAAAAAAAE0AAAAAAAAATgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQAAAAAAAAARAAAAAAAAAAAAAAAAADwvw"
				],
				[
					360,
					1,
					"insert",
					{
						"characters": "Rust"
					},
					"BQAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA5AAAAAAAAAAUAAABydXN0YTkAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAADwAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0AAAAAAAAAOAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "Searching 260 files for \"@da\"\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_TUTORIAL_CARLO_MILANESI.MD:\n 1253  \n 1254  \n 1255: TODO: @da@finire\t\t\tsi trova qui:\n 1256  \t\t\t\t\thttps://carlomilanesi.github.io/linguaggio-rust/getting-started.html\n 1257  \tTEMPO DI VITA 4.10\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/TUTORIAL_FREE_CODE_CAMP.MD:\n    1  TUTORIAL_FREE_CODE_CAMP\n    2  \tNota\n    3: \t\ttuttorial in italiano molto chiara @da @finire\n    4: \t\t\ttodo:@da@finire\n    5  \n    6  \n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/target/debug/deps/liblibc-352a4bba23709b49.rlib:\n    <binary>\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/target/debug/deps/liblibc-352a4bba23709b49.rmeta:\n    <binary>\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/target/debug/deps/liblibc-fd432a0ae7475d25.rmeta:\n    <binary>\n\n6 matches across 5 files\n\n\nSearching 260 files for \"@&T\"\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_TUTORIAL_CARLO_MILANESI.MD:\n 1269  \n 1270  \t\t\t\tSecondo, si può avere uno o l'altro dei due seguenti generi di prestiti, ma non entrambi allo stesso tempo:\n 1271: \t\t\t\t\t\t@riferimenti_@immutabili_o_@mutabili_(@&T= immutabile; @&mut T =  @mutabile )\n 1272  \t\t\t\tA) uno o più riferimenti non mutabili (&T) a un oggetto,\n 1273  \t\t\t\tB) esattamente un riferimento mutabile (&mut T) a un oggetto.\n\n1 match in 1 file\n\n\nSearching 260 files for \"@&T\"\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_TUTORIAL_CARLO_MILANESI.MD:\n 1272  \t\t\t\tSecondo, si può avere uno o l'altro dei due seguenti generi di prestiti, ma non entrambi allo stesso tempo:\n 1273  \t\t\t\t\t\t@riferimenti_@immutabili_o_@mutabili_(per fare un prestito in rust occorre &T e se mutabile &mut T:\n 1274: \t\t\t\t\t\t\t @&T= prestito immutabile; \n 1275  \t\t\t\t\t\t\t @&mut T =  prestito @mutabile )\n 1276  \n\n1 match in 1 file\n\n\nSearching 288 files for \"@esempio@di_(area scope di y)\"\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_TUTORIAL_CARLO_MILANESI.MD:\n 1361  \t\t\t\t\t\t\tprintln!(\"{}\", x);  // <- qui prova a prendere a prestito immutabile x\n 1362  \t\t\t\t\t\t\tNon c'è problema. Il nostro prestito mutabile esce di ambito prima che venga creato quello immutabile. Perciò l'ambito è la chiave per vedere quanto dura un prestito.\n 1363: \t\t\t\t\t\t\tvedi --->  @esempio@di_(area scope di y)\n 1364  \n 1365  \n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/ambito_prestito/src/main.rs:\n    1:             //@esempio@di_(area scope di y)\n    2  \n    3              //il prestito mutabile valido e parte da x e finisce alla graffa finale,\n\n2 matches across 2 files\n\n\nSearching 288 files for \"@esempio@di_(area scope di y)\"\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_TUTORIAL_CARLO_MILANESI.MD:\n 1361  \t\t\t\t\t\t\tprintln!(\"{}\", x);  // <- qui prova a prendere a prestito immutabile x\n 1362  \t\t\t\t\t\t\tNon c'è problema. Il nostro prestito mutabile esce di ambito prima che venga creato quello immutabile. Perciò l'ambito è la chiave per vedere quanto dura un prestito.\n 1363: \t\t\t\t\t\t\tvedi --->  @esempio@di_(area scope di y)\n 1364  \n 1365  \n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/ambito_prestito/src/main.rs:\n    1:             //@esempio@di_(area scope di y) progetto di rusta per la verifica.\n    2  \n    3              //il prestito mutabile valido e parte da x e finisce alla graffa finale,\n\n2 matches across 2 files\n\n\nSearching 288 files for \"@DA\"\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_TUTORIAL_CARLO_MILANESI.MD:\n 1278  \t\t\t\tB) esattamente un riferimento mutabile (&mut T) a un oggetto.\n 1279  \n 1280: \t\t\t\tCORSA AI DATI =  C'è una ‘@corsa @ai @dati’ @data@race quando due o più puntatori accedono alla medesima posizione di memoria nello stesso tempo, e per almeno uno di essi tale accesso è in scrittura, e tali accessi non sono sincronizzati.\n 1281  \n 1282  \t\t\t\tTANTI RIFERIMENTI MUTABILE SOLO UNO MUTABILE ALLA VOLTA = Per quanto riguarda i riferimenti immutabili, se ne possono avere quanti se ne vogliono, dato che nessuno di essi sta scrivendo. Però, dato possiamo avere solamente un riferimenti mutabili per volta, è impossibile avere una corsa ai dati. Questa tecnica consente a RUST IN FASE DI COMPILAZIONE DI PREVENIRE LE CORSE AI DATI: otterremmo degli errori se violiamo le regole.\n ....\n 1467  \n 1468  \n 1469: TODO: @da@finire\t\t\tsi trova qui:\n 1470  \t\t\t\t\thttps://carlomilanesi.github.io/linguaggio-rust/getting-started.html\n 1471  \n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/TUTORIAL_FREE_CODE_CAMP.MD:\n    1  TUTORIAL_FREE_CODE_CAMP\n    2  \tNota\n    3: \t\ttuttorial in italiano molto chiara @da @finire\n    4: \t\t\ttodo:@da@finire\n    5  \n    6  \n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/target/debug/deps/liblibc-352a4bba23709b49.rlib:\n    <binary>\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/target/debug/deps/liblibc-352a4bba23709b49.rmeta:\n    <binary>\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/target/debug/deps/liblibc-fd432a0ae7475d25.rmeta:\n    <binary>\n\n8 matches across 5 files\n\n\nSearching 288 files for \"@DA\"\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_TUTORIAL_CARLO_MILANESI.MD:\n 1278  \t\t\t\tB) esattamente un riferimento mutabile (&mut T) a un oggetto.\n 1279  \n 1280: \t\t\t\tCORSA AI DATI =  C'è una ‘@corsa @ai @dati’ @data@race quando due o più puntatori accedono alla medesima posizione di memoria nello stesso tempo, e per almeno uno di essi tale accesso è in scrittura, e tali accessi non sono sincronizzati.\n 1281  \n 1282  \t\t\t\tTANTI RIFERIMENTI MUTABILE SOLO UNO MUTABILE ALLA VOLTA = Per quanto riguarda i riferimenti immutabili, se ne possono avere quanti se ne vogliono, dato che nessuno di essi sta scrivendo. Però, dato possiamo avere solamente un riferimenti mutabili per volta, è impossibile avere una corsa ai dati. Questa tecnica consente a RUST IN FASE DI COMPILAZIONE DI PREVENIRE LE CORSE AI DATI: otterremmo degli errori se violiamo le regole.\n ....\n 1467  \n 1468  \n 1469: TODO: @da@finire\t\t\tsi trova qui:\n 1470  \t\t\t\t\thttps://carlomilanesi.github.io/linguaggio-rust/getting-started.html\n 1471  \n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/TUTORIAL_FREE_CODE_CAMP.MD:\n    1  TUTORIAL_FREE_CODE_CAMP\n    2  \tNota\n    3: \t\ttuttorial in italiano molto chiara @da @finire\n    4: \t\t\ttodo:@da@finire\n    5  \n    6  \n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/target/debug/deps/liblibc-352a4bba23709b49.rlib:\n    <binary>\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/target/debug/deps/liblibc-352a4bba23709b49.rmeta:\n    <binary>\n\n~/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/target/debug/deps/liblibc-fd432a0ae7475d25.rmeta:\n    <binary>\n\n8 matches across 5 files\n",
			"settings":
			{
				"buffer_size": 6967,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ter",
				"Terminal: Open"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: RE",
				"Package Control: Remove Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL",
		"/home/valter/CASA/CARTELLACONDIVISA/PASSAGGIO_DATI"
	],
	"file_history":
	[
		"/home/valter/CASA/CARTELLACONDIVISA/PASSAGGIO_DATI/PassaggioDati.txt",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/gioco_indovina/src/main.rs",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_TUTORIAL_CARLO_MILANESI.MD",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/TUTORIAL_FREE_CODE_CAMP.MD",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/prestito_valori/src/main.rs",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/GIT_BAT/git_OpenGitHub.bat",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/hello_word_cargo/Cargo.toml",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/hello_word_cargo/src/main.rs",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/hello_word_cargo/target/doc/settings.html",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/hello_word_cargo/target/doc/hello_world/fn.main.html",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/GIT_BAT/git_STATUS+ADD+COMMIT+PUSH.BAT",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/git",
		"/home/valter/.config/sublime-text/Packages/User/Package Control.user-ca-bundle",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/README.MD",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/src/main.rs",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/numero_segreto/src/main.rs",
		"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL/RUST_PROJECT_TUTORIAL/PROGETTI_RUST/genera_numero_segreto/numero_segreto/Cargo.toml",
		"/home/valter/CASA/LINGUAGGI/SUBLIMETEXT/SUBLIMETEXT.sublime-project",
		"/home/valter/CASA/LINGUAGGI/SUBLIMETEXT/ANALISI/TUTORIAL_SUBLIMETEXT.MD",
		"/home/valter/.config/sublime-text/Packages/User/PackageResourceViewer.sublime-settings",
		"/home/valter/.config/sublime-text/Packages/User/Monokai.sublime-color-scheme",
		"/home/valter/.config/sublime-text/Packages/User/Monokai.sublime-project",
		"/home/valter/CASA/CDM/LeTorri/ZIP_RAR_INCREMENTALE.sh",
		"/home/valter/CASA/LINGUAGGI/UBUNTU/UBUNTU_TUTORIAL.md",
		"/home/valter/CASA/ADUNANZE/STUDI_ADUNANZE.tex",
		"/home/valter/.config/sublime-text/Packages/PackageResourceViewer/PackageResourceViewer.sublime-settings",
		"/home/valter/CASA/ADUNANZE/STUDI_ADUNANZE.aux",
		"/home/valter/prova.txt",
		"/home/valter/Scaricati/sublime-text_build-4152_amd64.deb",
		"/home/valter/untitled"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			"/home/valter/CASA/LINGUAGGI/RUST/RUST_TUTORIAL,<project filters>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"@DA",
			"@esempio@di_(area scope di y)",
			"@&T",
			"@da",
			"@heap",
			"@array ",
			"@array @fisso",
			"@array",
			"@cicli@esterni",
			"@cicli @esterni",
			"@cigli @esterni",
			"@[]",
			"@puntatore",
			"@array",
			"usize",
			"@precisione",
			"@float",
			"@puntatori",
			"icivixwalter@gmail.com https://github.com/icivixwalter",
			"@->",
			"@inferenza",
			"@funzioni",
			"todo: da finire",
			"@da",
			"todo:",
			"todo :",
			"todo : da finire",
			"todo",
			"todo:",
			"_tentativo",
			"tenta_tivo",
			"tentativo",
			"foreground",
			"colore commento"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "RUST_TUTORIAL_CARLO_MILANESI.MD",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 74914,
						"regions":
						{
						},
						"selection":
						[
							[
								68225,
								68225
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false,
							"wrap_width": 100
						},
						"translation.x": 0.0,
						"translation.y": 33497.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "RUST_PROJECT_TUTORIAL/README.MD",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1498,
						"regions":
						{
						},
						"selection":
						[
							[
								855,
								855
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 197.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "RUST_PROJECT_TUTORIAL/PROGETTI_RUST/ambito_prestito/src/main.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1649,
						"regions":
						{
						},
						"selection":
						[
							[
								401,
								401
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6967,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										129,
										132
									],
									[
										439,
										442
									],
									[
										466,
										469
									],
									[
										1272,
										1275
									],
									[
										1821,
										1824
									],
									[
										2341,
										2370
									],
									[
										2510,
										2539
									],
									[
										3085,
										3114
									],
									[
										3254,
										3283
									],
									[
										3676,
										3679
									],
									[
										3683,
										3686
									],
									[
										4362,
										4365
									],
									[
										4653,
										4656
									],
									[
										4680,
										4683
									],
									[
										5437,
										5440
									],
									[
										5444,
										5447
									],
									[
										6123,
										6126
									],
									[
										6414,
										6417
									],
									[
										6441,
										6444
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								6127,
								6127
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 7,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2484.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "RUST_TUTORIAL.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/CASA/LINGUAGGI/UBUNTU/UBUNTU_PROJECT.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 312.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
