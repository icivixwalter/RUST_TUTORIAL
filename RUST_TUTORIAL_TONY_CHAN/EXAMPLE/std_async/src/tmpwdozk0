/* PROGETTO DI GESTIONE DELLA SINCRONIZZAZIONE DEI THREAD
- std::sync: offre strumenti per la sincronizzazione tra thread, come Mutex e Arc.
Questi consentono di condividere dati tra thread in modo sicuro, prevenendo race
conditions e altri problemi comuni nella programmazione concorrente


   @std@async_(esempio di programmazione concorrente con Mutex ed Arc)


@std@async.?

==============================================================================================================
S√¨, esattamente! ‚úÖ In Rust, .unwrap() pu√≤ essere utilizzato sia con
    Result<T, E> che con Option<T>,
e funziona in modo simile in entrambi i casi:
 RESULT
.1. .unwrap() su Result<T, E>
    Chiama .unwrap() quando sei sicuro che il risultato √® Ok(T), e vuoi ottenere il valore direttamente.
         Ma se il valore √® Err(E), .unwrap():
        fa panic (cio√® il programma si blocca)
        e stampa il messaggio dell‚Äôerrore contenuto in Err
    esempio:
                use std::fs::File;
                fn main() {
                    // Prova ad aprire un file
                    let file_result = File::open("dati.txt");

                    // Usa unwrap per ottenere il file se esiste
                    let file = file_result.unwrap();  // <-- qui si ottiene il file, o panic se non trovato
                    println!("File aperto correttamente: {:?}", file);
                    }

            ‚ñ∂Ô∏è Possibili casi:
                File dati.txt esiste?   file_result √®...    .unwrap() fa...
                ‚úÖ S√¨    Ok(File)    Ritorna il File
                ‚ùå No    Err(e)  Fa panic + stampa messaggio dell'errore


            ‚úÖ Come evitare il panic?
                Meglio usare .expect("spiegazione") oppure match:
                    .expect(): messaggio di errore personalizzato
                        let file = File::open("dati.txt").expect("Impossibile aprire il file dati.txt");

                oppure utilizzare il match: controllo esplicito
                    let file_result = File::open("dati.txt");

                        match file_result {
                            Ok(file) => println!("Aperto: {:?}", file),
                            Err(e) => println!("Errore: {}", e),
                        }


            | Tipo     | Casi possibili | Scopo                        | `.unwrap()` panica se... |
            | -------- | -------------- | ---------------------------- | ------------------------ |
            | `Option` | `Some`, `None` | Presenza o assenza di valore | √à `None`                 |
            | `Result` | `Ok`, `Err`    | Successo o fallimento        | √à `Err(E)`               |

            üí° Riassunto
                    Result = usato per gestire errori (es. I/O, parsing, rete...)
                    .unwrap() ottiene il valore di Ok, ma panica se Err
                    Preferibile usare expect o match per gestire elegantemente i casi di errore


OPTION
     2. .unwrap() su Option<T>
      üîπ 1. .unwrap() su Option<T>
        Comportamento:

            Se √® Some(val), .unwrap() restituisce val.
            Se √® None, il programma va in panic.

            esempio:
                let maybe_name = Some("Mario");
                let name = maybe_name.unwrap(); // restituisce "Mario"

                let empty: Option<i32> = None;
                let num = empty.unwrap(); // ‚ùå panic: called `Option::unwrap()` on a `None` value

    üß† A cosa serve Option<T>?
        Option viene usato per rappresentare un valore che
        potrebbe non esistere.
        Esempi pratici:
            1. Cercare qualcosa in una collezione:
                let numeri = vec![10, 20, 30];
                    let x = numeri.get(1); // restituisce Option<&i32>

                    match x {
                        Some(valore) => println!("Trovato: {}", valore),
                        None => println!("Elemento non trovato!"),
                    }

            2. Conversione stringa ‚Üí numero:
                let testo = "123";
                let numero: Option<i32> = testo.parse().ok(); // restituisce Option<i32>

                match numero {
                    Some(n) => println!("Numero: {}", n),
                    None => println!("Errore di parsing"),
                }

            ‚úÖ Quando usare Option<T>

            Ogni volta che:

                Il valore potrebbe essere assente

                La funzione non pu√≤ garantire che restituir√† qualcosa
                    Utilizziamo
                Esempio funzione personalizzata:
                    fn cerca_pari(v: &[i32]) -> Option<i32> {
                            for &n in v {
                                if n % 2 == 0 {
                                    return Some(n);
                                }
                            }
                            None
                        }

            ‚úÖ Conclusione
            Option<T> = Some(T) | None
                √® un modello mentale, non codice da scrivere direttamente.
                Serve a capire che un valore pu√≤ esistere (Some) o mancare (None).
                √à molto usato in Rust per scrivere codice sicuro senza usare null.

Nel programma viene inoltre utilizzato:
        Mutex  per  garantire  l'accesso  sicuro  a  un  contatore  condiviso  tra  pi√π
        thread.
        Mentre con Arc gestiamo il contatore in maniera sicura e condivisa.
==============================================================================================================

*/




use std::sync::{Arc, Mutex};
use std::thread;

fn main() {
    // ===========================
    // PRIMA PARTE - ESECUZIONE CON THREAD
    // ===========================

     //@async.03?
     println!("PROGETTO DI GESTIONE DELLA LIBRERIA STD::Async!");

    let contatore = Arc::new(Mutex::new(0));
    let mut handles = vec![];

      for _ in 0..10 {
        let contatore = Arc::clone(&contatore);
        let handle = thread::spawn(move || {
            let mut num = contatore.lock().unwrap();
            *num += 1;
        });
        handles.push(handle);
    }

    for handle in handles {
        handle.join().unwrap();
    }

    println!("Risultato: {}", *contatore.lock().unwrap());

}
